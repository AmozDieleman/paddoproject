
nucleo_tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000303c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003148  08003148  00004148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031cc  080031cc  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080031cc  080031cc  0000505c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080031cc  080031cc  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031cc  080031cc  000041cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031d0  080031d0  000041d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080031d4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000005c  08003230  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08003230  0000527c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000086f1  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000179c  00000000  00000000  0000d776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000798  00000000  00000000  0000ef18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005c5  00000000  00000000  0000f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171d8  00000000  00000000  0000fc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a6d  00000000  00000000  00026e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084aad  00000000  00000000  0002f8ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4367  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000235c  00000000  00000000  000b43ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000b6708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003130 	.word	0x08003130

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003130 	.word	0x08003130

0800014c <DBG>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_CAN_Init(void);
/* USER CODE BEGIN PFP */
void DBG(char * msg)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	int len = 0;
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
	char buffer;

	len = snprintf(&buffer, sizeof buffer, msg);
 8000158:	f107 030b 	add.w	r3, r7, #11
 800015c:	687a      	ldr	r2, [r7, #4]
 800015e:	2101      	movs	r1, #1
 8000160:	4618      	mov	r0, r3
 8000162:	f002 fb21 	bl	80027a8 <sniprintf>
 8000166:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t *) &buffer, len, HAL_MAX_DELAY);
 8000168:	68fb      	ldr	r3, [r7, #12]
 800016a:	b29a      	uxth	r2, r3
 800016c:	f107 010b 	add.w	r1, r7, #11
 8000170:	f04f 33ff 	mov.w	r3, #4294967295
 8000174:	4803      	ldr	r0, [pc, #12]	@ (8000184 <DBG+0x38>)
 8000176:	f002 f943 	bl	8002400 <HAL_UART_Transmit>
}
 800017a:	bf00      	nop
 800017c:	3710      	adds	r7, #16
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	200000a0 	.word	0x200000a0

08000188 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
    DBG("HAL_CAN_RxFifo0MsgPendingCallback");
 8000190:	4808      	ldr	r0, [pc, #32]	@ (80001b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000192:	f7ff ffdb 	bl	800014c <DBG>
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK) {
 8000196:	4b08      	ldr	r3, [pc, #32]	@ (80001b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000198:	4a08      	ldr	r2, [pc, #32]	@ (80001bc <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800019a:	2100      	movs	r1, #0
 800019c:	6878      	ldr	r0, [r7, #4]
 800019e:	f000 fe80 	bl	8000ea2 <HAL_CAN_GetRxMessage>
//        DBG("Got message %lu - id = 0x%04lx len = 0x%lx, data=%02x%02x%02x%02x%02x%02x%02x%02x", msg_count + 1, RxHeader.StdId, RxHeader.DLC, RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);
    }
    msg_count++;
 80001a2:	4b07      	ldr	r3, [pc, #28]	@ (80001c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	3301      	adds	r3, #1
 80001a8:	4a05      	ldr	r2, [pc, #20]	@ (80001c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80001aa:	6013      	str	r3, [r2, #0]
}
 80001ac:	bf00      	nop
 80001ae:	3708      	adds	r7, #8
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	08003148 	.word	0x08003148
 80001b8:	20000120 	.word	0x20000120
 80001bc:	20000100 	.word	0x20000100
 80001c0:	20000128 	.word	0x20000128

080001c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b08e      	sub	sp, #56	@ 0x38
 80001c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ca:	f000 fb31 	bl	8000830 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ce:	f000 f86b 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d2:	f000 f90b 	bl	80003ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d6:	f000 f8df 	bl	8000398 <MX_USART2_UART_Init>
  MX_CAN_Init();
 80001da:	f000 f8a7 	bl	800032c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
//	DBG("\n\n\n\n\n---------------------\nCAN Loopback Starting");

	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80001de:	2301      	movs	r3, #1
 80001e0:	62bb      	str	r3, [r7, #40]	@ 0x28
	canfilterconfig.FilterBank = 12;  // anything between 0 to SlaveStartFilterBank
 80001e2:	230c      	movs	r3, #12
 80001e4:	61fb      	str	r3, [r7, #28]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	61bb      	str	r3, [r7, #24]
	//canfilterconfig.FilterIdHigh = 0x103<<5;
	canfilterconfig.FilterIdHigh = 0x0000;
 80001ea:	2300      	movs	r3, #0
 80001ec:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterIdLow = 0x0000;
 80001ee:	2300      	movs	r3, #0
 80001f0:	60fb      	str	r3, [r7, #12]
	//canfilterconfig.FilterMaskIdHigh = 0x1<<13;
	canfilterconfig.FilterMaskIdHigh = 0x0;
 80001f2:	2300      	movs	r3, #0
 80001f4:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterMaskIdLow = 0x0;
 80001f6:	2300      	movs	r3, #0
 80001f8:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001fa:	2300      	movs	r3, #0
 80001fc:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001fe:	2301      	movs	r3, #1
 8000200:	627b      	str	r3, [r7, #36]	@ 0x24
	canfilterconfig.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8000202:	230d      	movs	r3, #13
 8000204:	62fb      	str	r3, [r7, #44]	@ 0x2c

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000206:	f107 0308 	add.w	r3, r7, #8
 800020a:	4619      	mov	r1, r3
 800020c:	4821      	ldr	r0, [pc, #132]	@ (8000294 <main+0xd0>)
 800020e:	f000 fc6c 	bl	8000aea <HAL_CAN_ConfigFilter>

	HAL_CAN_Start(&hcan);
 8000212:	4820      	ldr	r0, [pc, #128]	@ (8000294 <main+0xd0>)
 8000214:	f000 fd32 	bl	8000c7c <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(
 8000218:	491f      	ldr	r1, [pc, #124]	@ (8000298 <main+0xd4>)
 800021a:	481e      	ldr	r0, [pc, #120]	@ (8000294 <main+0xd0>)
 800021c:	f000 ff62 	bl	80010e4 <HAL_CAN_ActivateNotification>
	);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t now = 0, last_blink = 0, last_tx = 0;
 8000220:	2300      	movs	r3, #0
 8000222:	607b      	str	r3, [r7, #4]
 8000224:	2300      	movs	r3, #0
 8000226:	637b      	str	r3, [r7, #52]	@ 0x34
 8000228:	2300      	movs	r3, #0
 800022a:	633b      	str	r3, [r7, #48]	@ 0x30

  while (1) {

	  now = HAL_GetTick();
 800022c:	f000 fb58 	bl	80008e0 <HAL_GetTick>
 8000230:	4603      	mov	r3, r0
 8000232:	607b      	str	r3, [r7, #4]

	  if (now - last_tx >= 100) {
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000238:	1ad3      	subs	r3, r2, r3
 800023a:	2b63      	cmp	r3, #99	@ 0x63
 800023c:	d91c      	bls.n	8000278 <main+0xb4>

		  TxHeader.DLC = 4;
 800023e:	4b17      	ldr	r3, [pc, #92]	@ (800029c <main+0xd8>)
 8000240:	2204      	movs	r2, #4
 8000242:	611a      	str	r2, [r3, #16]
		  TxHeader.ExtId = 0;
 8000244:	4b15      	ldr	r3, [pc, #84]	@ (800029c <main+0xd8>)
 8000246:	2200      	movs	r2, #0
 8000248:	605a      	str	r2, [r3, #4]
		  TxHeader.IDE = CAN_ID_STD;
 800024a:	4b14      	ldr	r3, [pc, #80]	@ (800029c <main+0xd8>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
		  TxHeader.RTR = CAN_RTR_DATA;
 8000250:	4b12      	ldr	r3, [pc, #72]	@ (800029c <main+0xd8>)
 8000252:	2200      	movs	r2, #0
 8000254:	60da      	str	r2, [r3, #12]
		  TxHeader.StdId = 0x601;
 8000256:	4b11      	ldr	r3, [pc, #68]	@ (800029c <main+0xd8>)
 8000258:	f240 6201 	movw	r2, #1537	@ 0x601
 800025c:	601a      	str	r2, [r3, #0]
		  //TxHeader.TransmitGlobalTime = DISABLE;

		  if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, (uint8_t *)&now, &TxMailbox) != HAL_OK)
 800025e:	1d3a      	adds	r2, r7, #4
 8000260:	4b0f      	ldr	r3, [pc, #60]	@ (80002a0 <main+0xdc>)
 8000262:	490e      	ldr	r1, [pc, #56]	@ (800029c <main+0xd8>)
 8000264:	480b      	ldr	r0, [pc, #44]	@ (8000294 <main+0xd0>)
 8000266:	f000 fd4d 	bl	8000d04 <HAL_CAN_AddTxMessage>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <main+0xb0>
		  {
			  Error_Handler();
 8000270:	f000 f92a 	bl	80004c8 <Error_Handler>
		  }

		  last_tx = now;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	633b      	str	r3, [r7, #48]	@ 0x30
	  }

	  if (now - last_blink >= 500) {
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800027c:	1ad3      	subs	r3, r2, r3
 800027e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000282:	d3d3      	bcc.n	800022c <main+0x68>

		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000284:	2120      	movs	r1, #32
 8000286:	4807      	ldr	r0, [pc, #28]	@ (80002a4 <main+0xe0>)
 8000288:	f001 fc1e 	bl	8001ac8 <HAL_GPIO_TogglePin>

		  last_blink = now;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	637b      	str	r3, [r7, #52]	@ 0x34
	  now = HAL_GetTick();
 8000290:	e7cc      	b.n	800022c <main+0x68>
 8000292:	bf00      	nop
 8000294:	20000078 	.word	0x20000078
 8000298:	00038f7f 	.word	0x00038f7f
 800029c:	200000e8 	.word	0x200000e8
 80002a0:	2000011c 	.word	0x2000011c
 80002a4:	40010800 	.word	0x40010800

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b090      	sub	sp, #64	@ 0x40
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	2228      	movs	r2, #40	@ 0x28
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f002 faac 	bl	8002814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ca:	2302      	movs	r3, #2
 80002cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ce:	2301      	movs	r3, #1
 80002d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d2:	2310      	movs	r3, #16
 80002d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	2302      	movs	r3, #2
 80002d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002da:	2300      	movs	r3, #0
 80002dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002de:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80002e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e4:	f107 0318 	add.w	r3, r7, #24
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 fc29 	bl	8001b40 <HAL_RCC_OscConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80002f4:	f000 f8e8 	bl	80004c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f8:	230f      	movs	r3, #15
 80002fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fc:	2302      	movs	r3, #2
 80002fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000304:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000308:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2102      	movs	r1, #2
 8000312:	4618      	mov	r0, r3
 8000314:	f001 fe96 	bl	8002044 <HAL_RCC_ClockConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800031e:	f000 f8d3 	bl	80004c8 <Error_Handler>
  }
}
 8000322:	bf00      	nop
 8000324:	3740      	adds	r7, #64	@ 0x40
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
	...

0800032c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000330:	4b17      	ldr	r3, [pc, #92]	@ (8000390 <MX_CAN_Init+0x64>)
 8000332:	4a18      	ldr	r2, [pc, #96]	@ (8000394 <MX_CAN_Init+0x68>)
 8000334:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 8000336:	4b16      	ldr	r3, [pc, #88]	@ (8000390 <MX_CAN_Init+0x64>)
 8000338:	2208      	movs	r2, #8
 800033a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800033c:	4b14      	ldr	r3, [pc, #80]	@ (8000390 <MX_CAN_Init+0x64>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000342:	4b13      	ldr	r3, [pc, #76]	@ (8000390 <MX_CAN_Init+0x64>)
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000348:	4b11      	ldr	r3, [pc, #68]	@ (8000390 <MX_CAN_Init+0x64>)
 800034a:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800034e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000350:	4b0f      	ldr	r3, [pc, #60]	@ (8000390 <MX_CAN_Init+0x64>)
 8000352:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8000356:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000358:	4b0d      	ldr	r3, [pc, #52]	@ (8000390 <MX_CAN_Init+0x64>)
 800035a:	2200      	movs	r2, #0
 800035c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800035e:	4b0c      	ldr	r3, [pc, #48]	@ (8000390 <MX_CAN_Init+0x64>)
 8000360:	2200      	movs	r2, #0
 8000362:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000364:	4b0a      	ldr	r3, [pc, #40]	@ (8000390 <MX_CAN_Init+0x64>)
 8000366:	2200      	movs	r2, #0
 8000368:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800036a:	4b09      	ldr	r3, [pc, #36]	@ (8000390 <MX_CAN_Init+0x64>)
 800036c:	2200      	movs	r2, #0
 800036e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000370:	4b07      	ldr	r3, [pc, #28]	@ (8000390 <MX_CAN_Init+0x64>)
 8000372:	2200      	movs	r2, #0
 8000374:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000376:	4b06      	ldr	r3, [pc, #24]	@ (8000390 <MX_CAN_Init+0x64>)
 8000378:	2200      	movs	r2, #0
 800037a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800037c:	4804      	ldr	r0, [pc, #16]	@ (8000390 <MX_CAN_Init+0x64>)
 800037e:	f000 fab9 	bl	80008f4 <HAL_CAN_Init>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000388:	f000 f89e 	bl	80004c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000078 	.word	0x20000078
 8000394:	40006400 	.word	0x40006400

08000398 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800039c:	4b11      	ldr	r3, [pc, #68]	@ (80003e4 <MX_USART2_UART_Init+0x4c>)
 800039e:	4a12      	ldr	r2, [pc, #72]	@ (80003e8 <MX_USART2_UART_Init+0x50>)
 80003a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003a2:	4b10      	ldr	r3, [pc, #64]	@ (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	@ (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003b0:	4b0c      	ldr	r3, [pc, #48]	@ (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	@ (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003bc:	4b09      	ldr	r3, [pc, #36]	@ (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003be:	220c      	movs	r2, #12
 80003c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c2:	4b08      	ldr	r3, [pc, #32]	@ (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c8:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ce:	4805      	ldr	r0, [pc, #20]	@ (80003e4 <MX_USART2_UART_Init+0x4c>)
 80003d0:	f001 ffc6 	bl	8002360 <HAL_UART_Init>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003da:	f000 f875 	bl	80004c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	200000a0 	.word	0x200000a0
 80003e8:	40004400 	.word	0x40004400

080003ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	f107 0310 	add.w	r3, r7, #16
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000400:	4b2d      	ldr	r3, [pc, #180]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	4a2c      	ldr	r2, [pc, #176]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 8000406:	f043 0310 	orr.w	r3, r3, #16
 800040a:	6193      	str	r3, [r2, #24]
 800040c:	4b2a      	ldr	r3, [pc, #168]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	f003 0310 	and.w	r3, r3, #16
 8000414:	60fb      	str	r3, [r7, #12]
 8000416:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000418:	4b27      	ldr	r3, [pc, #156]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a26      	ldr	r2, [pc, #152]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 800041e:	f043 0320 	orr.w	r3, r3, #32
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b24      	ldr	r3, [pc, #144]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0320 	and.w	r3, r3, #32
 800042c:	60bb      	str	r3, [r7, #8]
 800042e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000430:	4b21      	ldr	r3, [pc, #132]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a20      	ldr	r2, [pc, #128]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 8000436:	f043 0304 	orr.w	r3, r3, #4
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b1e      	ldr	r3, [pc, #120]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0304 	and.w	r3, r3, #4
 8000444:	607b      	str	r3, [r7, #4]
 8000446:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000448:	4b1b      	ldr	r3, [pc, #108]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a1a      	ldr	r2, [pc, #104]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 800044e:	f043 0308 	orr.w	r3, r3, #8
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b18      	ldr	r3, [pc, #96]	@ (80004b8 <MX_GPIO_Init+0xcc>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0308 	and.w	r3, r3, #8
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2120      	movs	r1, #32
 8000464:	4815      	ldr	r0, [pc, #84]	@ (80004bc <MX_GPIO_Init+0xd0>)
 8000466:	f001 fb17 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800046a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800046e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000470:	4b13      	ldr	r3, [pc, #76]	@ (80004c0 <MX_GPIO_Init+0xd4>)
 8000472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000478:	f107 0310 	add.w	r3, r7, #16
 800047c:	4619      	mov	r1, r3
 800047e:	4811      	ldr	r0, [pc, #68]	@ (80004c4 <MX_GPIO_Init+0xd8>)
 8000480:	f001 f986 	bl	8001790 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000484:	2320      	movs	r3, #32
 8000486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000488:	2301      	movs	r3, #1
 800048a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000490:	2302      	movs	r3, #2
 8000492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	4619      	mov	r1, r3
 800049a:	4808      	ldr	r0, [pc, #32]	@ (80004bc <MX_GPIO_Init+0xd0>)
 800049c:	f001 f978 	bl	8001790 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2100      	movs	r1, #0
 80004a4:	2028      	movs	r0, #40	@ 0x28
 80004a6:	f001 f93c 	bl	8001722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004aa:	2028      	movs	r0, #40	@ 0x28
 80004ac:	f001 f955 	bl	800175a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004b0:	bf00      	nop
 80004b2:	3720      	adds	r7, #32
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010800 	.word	0x40010800
 80004c0:	10110000 	.word	0x10110000
 80004c4:	40011000 	.word	0x40011000

080004c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ce:	b672      	cpsid	i
}
 80004d0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  uint32_t now = 0, last_blink = 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	603b      	str	r3, [r7, #0]
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]

  while (1)
  {
	  now = HAL_GetTick();
 80004da:	f000 fa01 	bl	80008e0 <HAL_GetTick>
 80004de:	6038      	str	r0, [r7, #0]

	  if (now - last_blink >= 100) {
 80004e0:	683a      	ldr	r2, [r7, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	1ad3      	subs	r3, r2, r3
 80004e6:	2b63      	cmp	r3, #99	@ 0x63
 80004e8:	d9f7      	bls.n	80004da <Error_Handler+0x12>

		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004ea:	2120      	movs	r1, #32
 80004ec:	4802      	ldr	r0, [pc, #8]	@ (80004f8 <Error_Handler+0x30>)
 80004ee:	f001 faeb 	bl	8001ac8 <HAL_GPIO_TogglePin>

		  last_blink = now;
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	607b      	str	r3, [r7, #4]
	  now = HAL_GetTick();
 80004f6:	e7f0      	b.n	80004da <Error_Handler+0x12>
 80004f8:	40010800 	.word	0x40010800

080004fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000502:	4b15      	ldr	r3, [pc, #84]	@ (8000558 <HAL_MspInit+0x5c>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	4a14      	ldr	r2, [pc, #80]	@ (8000558 <HAL_MspInit+0x5c>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6193      	str	r3, [r2, #24]
 800050e:	4b12      	ldr	r3, [pc, #72]	@ (8000558 <HAL_MspInit+0x5c>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051a:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <HAL_MspInit+0x5c>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <HAL_MspInit+0x5c>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000524:	61d3      	str	r3, [r2, #28]
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <HAL_MspInit+0x5c>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000532:	4b0a      	ldr	r3, [pc, #40]	@ (800055c <HAL_MspInit+0x60>)
 8000534:	685b      	ldr	r3, [r3, #4]
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	4a04      	ldr	r2, [pc, #16]	@ (800055c <HAL_MspInit+0x60>)
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	40021000 	.word	0x40021000
 800055c:	40010000 	.word	0x40010000

08000560 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a2c      	ldr	r2, [pc, #176]	@ (800062c <HAL_CAN_MspInit+0xcc>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d151      	bne.n	8000624 <HAL_CAN_MspInit+0xc4>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000580:	4b2b      	ldr	r3, [pc, #172]	@ (8000630 <HAL_CAN_MspInit+0xd0>)
 8000582:	69db      	ldr	r3, [r3, #28]
 8000584:	4a2a      	ldr	r2, [pc, #168]	@ (8000630 <HAL_CAN_MspInit+0xd0>)
 8000586:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800058a:	61d3      	str	r3, [r2, #28]
 800058c:	4b28      	ldr	r3, [pc, #160]	@ (8000630 <HAL_CAN_MspInit+0xd0>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000598:	4b25      	ldr	r3, [pc, #148]	@ (8000630 <HAL_CAN_MspInit+0xd0>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a24      	ldr	r2, [pc, #144]	@ (8000630 <HAL_CAN_MspInit+0xd0>)
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b22      	ldr	r3, [pc, #136]	@ (8000630 <HAL_CAN_MspInit+0xd0>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0304 	and.w	r3, r3, #4
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80005b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	4619      	mov	r1, r3
 80005c4:	481b      	ldr	r0, [pc, #108]	@ (8000634 <HAL_CAN_MspInit+0xd4>)
 80005c6:	f001 f8e3 	bl	8001790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80005ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d0:	2302      	movs	r3, #2
 80005d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d4:	2303      	movs	r3, #3
 80005d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	4619      	mov	r1, r3
 80005de:	4815      	ldr	r0, [pc, #84]	@ (8000634 <HAL_CAN_MspInit+0xd4>)
 80005e0:	f001 f8d6 	bl	8001790 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2100      	movs	r1, #0
 80005e8:	2013      	movs	r0, #19
 80005ea:	f001 f89a 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80005ee:	2013      	movs	r0, #19
 80005f0:	f001 f8b3 	bl	800175a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2100      	movs	r1, #0
 80005f8:	2014      	movs	r0, #20
 80005fa:	f001 f892 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80005fe:	2014      	movs	r0, #20
 8000600:	f001 f8ab 	bl	800175a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2100      	movs	r1, #0
 8000608:	2015      	movs	r0, #21
 800060a:	f001 f88a 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800060e:	2015      	movs	r0, #21
 8000610:	f001 f8a3 	bl	800175a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2100      	movs	r1, #0
 8000618:	2016      	movs	r0, #22
 800061a:	f001 f882 	bl	8001722 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800061e:	2016      	movs	r0, #22
 8000620:	f001 f89b 	bl	800175a <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000624:	bf00      	nop
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40006400 	.word	0x40006400
 8000630:	40021000 	.word	0x40021000
 8000634:	40010800 	.word	0x40010800

08000638 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a15      	ldr	r2, [pc, #84]	@ (80006a8 <HAL_UART_MspInit+0x70>)
 8000654:	4293      	cmp	r3, r2
 8000656:	d123      	bne.n	80006a0 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000658:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <HAL_UART_MspInit+0x74>)
 800065a:	69db      	ldr	r3, [r3, #28]
 800065c:	4a13      	ldr	r2, [pc, #76]	@ (80006ac <HAL_UART_MspInit+0x74>)
 800065e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000662:	61d3      	str	r3, [r2, #28]
 8000664:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <HAL_UART_MspInit+0x74>)
 8000666:	69db      	ldr	r3, [r3, #28]
 8000668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000670:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <HAL_UART_MspInit+0x74>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a0d      	ldr	r2, [pc, #52]	@ (80006ac <HAL_UART_MspInit+0x74>)
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <HAL_UART_MspInit+0x74>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0304 	and.w	r3, r3, #4
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000688:	230c      	movs	r3, #12
 800068a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068c:	2302      	movs	r3, #2
 800068e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2302      	movs	r3, #2
 8000692:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4619      	mov	r1, r3
 800069a:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <HAL_UART_MspInit+0x78>)
 800069c:	f001 f878 	bl	8001790 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80006a0:	bf00      	nop
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40004400 	.word	0x40004400
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010800 	.word	0x40010800

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <NMI_Handler+0x4>

080006bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <HardFault_Handler+0x4>

080006c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <MemManage_Handler+0x4>

080006cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <BusFault_Handler+0x4>

080006d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <UsageFault_Handler+0x4>

080006dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000704:	f000 f8da 	bl	80008bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000710:	4802      	ldr	r0, [pc, #8]	@ (800071c <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8000712:	f000 fd0c 	bl	800112e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000078 	.word	0x20000078

08000720 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000724:	4802      	ldr	r0, [pc, #8]	@ (8000730 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000726:	f000 fd02 	bl	800112e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000078 	.word	0x20000078

08000734 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000738:	4802      	ldr	r0, [pc, #8]	@ (8000744 <CAN1_RX1_IRQHandler+0x10>)
 800073a:	f000 fcf8 	bl	800112e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000078 	.word	0x20000078

08000748 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800074c:	4802      	ldr	r0, [pc, #8]	@ (8000758 <CAN1_SCE_IRQHandler+0x10>)
 800074e:	f000 fcee 	bl	800112e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000078 	.word	0x20000078

0800075c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000760:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000764:	f001 f9ca 	bl	8001afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}

0800076c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000774:	4a14      	ldr	r2, [pc, #80]	@ (80007c8 <_sbrk+0x5c>)
 8000776:	4b15      	ldr	r3, [pc, #84]	@ (80007cc <_sbrk+0x60>)
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800077c:	697b      	ldr	r3, [r7, #20]
 800077e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000780:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <_sbrk+0x64>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d102      	bne.n	800078e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000788:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <_sbrk+0x64>)
 800078a:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <_sbrk+0x68>)
 800078c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <_sbrk+0x64>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	693a      	ldr	r2, [r7, #16]
 8000798:	429a      	cmp	r2, r3
 800079a:	d207      	bcs.n	80007ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800079c:	f002 f842 	bl	8002824 <__errno>
 80007a0:	4603      	mov	r3, r0
 80007a2:	220c      	movs	r2, #12
 80007a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007a6:	f04f 33ff 	mov.w	r3, #4294967295
 80007aa:	e009      	b.n	80007c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007ac:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <_sbrk+0x64>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007b2:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <_sbrk+0x64>)
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	4413      	add	r3, r2
 80007ba:	4a05      	ldr	r2, [pc, #20]	@ (80007d0 <_sbrk+0x64>)
 80007bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007be:	68fb      	ldr	r3, [r7, #12]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20005000 	.word	0x20005000
 80007cc:	00000400 	.word	0x00000400
 80007d0:	2000012c 	.word	0x2000012c
 80007d4:	20000280 	.word	0x20000280

080007d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007e4:	f7ff fff8 	bl	80007d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007e8:	480b      	ldr	r0, [pc, #44]	@ (8000818 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007ea:	490c      	ldr	r1, [pc, #48]	@ (800081c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000820 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f0:	e002      	b.n	80007f8 <LoopCopyDataInit>

080007f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f6:	3304      	adds	r3, #4

080007f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007fc:	d3f9      	bcc.n	80007f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fe:	4a09      	ldr	r2, [pc, #36]	@ (8000824 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000800:	4c09      	ldr	r4, [pc, #36]	@ (8000828 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000804:	e001      	b.n	800080a <LoopFillZerobss>

08000806 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000806:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000808:	3204      	adds	r2, #4

0800080a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800080c:	d3fb      	bcc.n	8000806 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800080e:	f002 f80f 	bl	8002830 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000812:	f7ff fcd7 	bl	80001c4 <main>
  bx lr
 8000816:	4770      	bx	lr
  ldr r0, =_sdata
 8000818:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800081c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000820:	080031d4 	.word	0x080031d4
  ldr r2, =_sbss
 8000824:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000828:	2000027c 	.word	0x2000027c

0800082c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800082c:	e7fe      	b.n	800082c <ADC1_2_IRQHandler>
	...

08000830 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000834:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <HAL_Init+0x28>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a07      	ldr	r2, [pc, #28]	@ (8000858 <HAL_Init+0x28>)
 800083a:	f043 0310 	orr.w	r3, r3, #16
 800083e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000840:	2003      	movs	r0, #3
 8000842:	f000 ff63 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000846:	2000      	movs	r0, #0
 8000848:	f000 f808 	bl	800085c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800084c:	f7ff fe56 	bl	80004fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000850:	2300      	movs	r3, #0
}
 8000852:	4618      	mov	r0, r3
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40022000 	.word	0x40022000

0800085c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <HAL_InitTick+0x54>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <HAL_InitTick+0x58>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4619      	mov	r1, r3
 800086e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000872:	fbb3 f3f1 	udiv	r3, r3, r1
 8000876:	fbb2 f3f3 	udiv	r3, r2, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f000 ff7b 	bl	8001776 <HAL_SYSTICK_Config>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
 8000888:	e00e      	b.n	80008a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2b0f      	cmp	r3, #15
 800088e:	d80a      	bhi.n	80008a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000890:	2200      	movs	r2, #0
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	f000 ff43 	bl	8001722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800089c:	4a06      	ldr	r2, [pc, #24]	@ (80008b8 <HAL_InitTick+0x5c>)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e000      	b.n	80008a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000000 	.word	0x20000000
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000004 	.word	0x20000004

080008bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c0:	4b05      	ldr	r3, [pc, #20]	@ (80008d8 <HAL_IncTick+0x1c>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <HAL_IncTick+0x20>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4413      	add	r3, r2
 80008cc:	4a03      	ldr	r2, [pc, #12]	@ (80008dc <HAL_IncTick+0x20>)
 80008ce:	6013      	str	r3, [r2, #0]
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20000130 	.word	0x20000130

080008e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return uwTick;
 80008e4:	4b02      	ldr	r3, [pc, #8]	@ (80008f0 <HAL_GetTick+0x10>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	20000130 	.word	0x20000130

080008f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d101      	bne.n	8000906 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e0ed      	b.n	8000ae2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f893 3020 	ldrb.w	r3, [r3, #32]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	2b00      	cmp	r3, #0
 8000910:	d102      	bne.n	8000918 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff fe24 	bl	8000560 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f042 0201 	orr.w	r2, r2, #1
 8000926:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000928:	f7ff ffda 	bl	80008e0 <HAL_GetTick>
 800092c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800092e:	e012      	b.n	8000956 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000930:	f7ff ffd6 	bl	80008e0 <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	2b0a      	cmp	r3, #10
 800093c:	d90b      	bls.n	8000956 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000942:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2205      	movs	r2, #5
 800094e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
 8000954:	e0c5      	b.n	8000ae2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0e5      	beq.n	8000930 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f022 0202 	bic.w	r2, r2, #2
 8000972:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000974:	f7ff ffb4 	bl	80008e0 <HAL_GetTick>
 8000978:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800097a:	e012      	b.n	80009a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800097c:	f7ff ffb0 	bl	80008e0 <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	2b0a      	cmp	r3, #10
 8000988:	d90b      	bls.n	80009a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800098e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2205      	movs	r2, #5
 800099a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e09f      	b.n	8000ae2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f003 0302 	and.w	r3, r3, #2
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d1e5      	bne.n	800097c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7e1b      	ldrb	r3, [r3, #24]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d108      	bne.n	80009ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	e007      	b.n	80009da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80009d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	7e5b      	ldrb	r3, [r3, #25]
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d108      	bne.n	80009f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	e007      	b.n	8000a04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000a02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	7e9b      	ldrb	r3, [r3, #26]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d108      	bne.n	8000a1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f042 0220 	orr.w	r2, r2, #32
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	e007      	b.n	8000a2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f022 0220 	bic.w	r2, r2, #32
 8000a2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	7edb      	ldrb	r3, [r3, #27]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d108      	bne.n	8000a48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f022 0210 	bic.w	r2, r2, #16
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	e007      	b.n	8000a58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f042 0210 	orr.w	r2, r2, #16
 8000a56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	7f1b      	ldrb	r3, [r3, #28]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d108      	bne.n	8000a72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f042 0208 	orr.w	r2, r2, #8
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	e007      	b.n	8000a82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f022 0208 	bic.w	r2, r2, #8
 8000a80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	7f5b      	ldrb	r3, [r3, #29]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d108      	bne.n	8000a9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f042 0204 	orr.w	r2, r2, #4
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	e007      	b.n	8000aac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f022 0204 	bic.w	r2, r2, #4
 8000aaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	431a      	orrs	r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	431a      	orrs	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	695b      	ldr	r3, [r3, #20]
 8000ac0:	ea42 0103 	orr.w	r1, r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	1e5a      	subs	r2, r3, #1
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2201      	movs	r2, #1
 8000adc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ae0:	2300      	movs	r3, #0
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000aea:	b480      	push	{r7}
 8000aec:	b087      	sub	sp, #28
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b00:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b02:	7cfb      	ldrb	r3, [r7, #19]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d003      	beq.n	8000b10 <HAL_CAN_ConfigFilter+0x26>
 8000b08:	7cfb      	ldrb	r3, [r7, #19]
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	f040 80aa 	bne.w	8000c64 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b16:	f043 0201 	orr.w	r2, r3, #1
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	f003 031f 	and.w	r3, r3, #31
 8000b28:	2201      	movs	r2, #1
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	43db      	mvns	r3, r3
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d123      	bne.n	8000b92 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	43db      	mvns	r3, r3
 8000b54:	401a      	ands	r2, r3
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b68:	683a      	ldr	r2, [r7, #0]
 8000b6a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b6c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	3248      	adds	r2, #72	@ 0x48
 8000b72:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b86:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b88:	6979      	ldr	r1, [r7, #20]
 8000b8a:	3348      	adds	r3, #72	@ 0x48
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	440b      	add	r3, r1
 8000b90:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d122      	bne.n	8000be0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bb6:	683a      	ldr	r2, [r7, #0]
 8000bb8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000bba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	3248      	adds	r2, #72	@ 0x48
 8000bc0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bd4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bd6:	6979      	ldr	r1, [r7, #20]
 8000bd8:	3348      	adds	r3, #72	@ 0x48
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	440b      	add	r3, r1
 8000bde:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d109      	bne.n	8000bfc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000bfa:	e007      	b.n	8000c0c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	431a      	orrs	r2, r3
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d109      	bne.n	8000c28 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	401a      	ands	r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000c26:	e007      	b.n	8000c38 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	431a      	orrs	r2, r3
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	6a1b      	ldr	r3, [r3, #32]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d107      	bne.n	8000c50 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	431a      	orrs	r2, r3
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c56:	f023 0201 	bic.w	r2, r3, #1
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000c60:	2300      	movs	r3, #0
 8000c62:	e006      	b.n	8000c72 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c68:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c70:	2301      	movs	r3, #1
  }
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	371c      	adds	r7, #28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr

08000c7c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d12e      	bne.n	8000cee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2202      	movs	r2, #2
 8000c94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f022 0201 	bic.w	r2, r2, #1
 8000ca6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ca8:	f7ff fe1a 	bl	80008e0 <HAL_GetTick>
 8000cac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cae:	e012      	b.n	8000cd6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cb0:	f7ff fe16 	bl	80008e0 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b0a      	cmp	r3, #10
 8000cbc:	d90b      	bls.n	8000cd6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2205      	movs	r2, #5
 8000cce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e012      	b.n	8000cfc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0301 	and.w	r3, r3, #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1e5      	bne.n	8000cb0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e006      	b.n	8000cfc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
  }
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	@ 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d18:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d22:	7ffb      	ldrb	r3, [r7, #31]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d003      	beq.n	8000d30 <HAL_CAN_AddTxMessage+0x2c>
 8000d28:	7ffb      	ldrb	r3, [r7, #31]
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	f040 80ad 	bne.w	8000e8a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10a      	bne.n	8000d50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d105      	bne.n	8000d50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	f000 8095 	beq.w	8000e7a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	0e1b      	lsrs	r3, r3, #24
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d10d      	bne.n	8000d88 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d76:	68f9      	ldr	r1, [r7, #12]
 8000d78:	6809      	ldr	r1, [r1, #0]
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	3318      	adds	r3, #24
 8000d80:	011b      	lsls	r3, r3, #4
 8000d82:	440b      	add	r3, r1
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	e00f      	b.n	8000da8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d92:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d98:	68f9      	ldr	r1, [r7, #12]
 8000d9a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000d9c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3318      	adds	r3, #24
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	440b      	add	r3, r1
 8000da6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	6819      	ldr	r1, [r3, #0]
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	691a      	ldr	r2, [r3, #16]
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	3318      	adds	r3, #24
 8000db4:	011b      	lsls	r3, r3, #4
 8000db6:	440b      	add	r3, r1
 8000db8:	3304      	adds	r3, #4
 8000dba:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	7d1b      	ldrb	r3, [r3, #20]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d111      	bne.n	8000de8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	3318      	adds	r3, #24
 8000dcc:	011b      	lsls	r3, r3, #4
 8000dce:	4413      	add	r3, r2
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	6811      	ldr	r1, [r2, #0]
 8000dd8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	3318      	adds	r3, #24
 8000de0:	011b      	lsls	r3, r3, #4
 8000de2:	440b      	add	r3, r1
 8000de4:	3304      	adds	r3, #4
 8000de6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3307      	adds	r3, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	061a      	lsls	r2, r3, #24
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3306      	adds	r3, #6
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	041b      	lsls	r3, r3, #16
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3305      	adds	r3, #5
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	021b      	lsls	r3, r3, #8
 8000e02:	4313      	orrs	r3, r2
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	3204      	adds	r2, #4
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	6811      	ldr	r1, [r2, #0]
 8000e10:	ea43 0200 	orr.w	r2, r3, r0
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	011b      	lsls	r3, r3, #4
 8000e18:	440b      	add	r3, r1
 8000e1a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000e1e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3303      	adds	r3, #3
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	061a      	lsls	r2, r3, #24
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3302      	adds	r3, #2
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	041b      	lsls	r3, r3, #16
 8000e30:	431a      	orrs	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3301      	adds	r3, #1
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	7812      	ldrb	r2, [r2, #0]
 8000e40:	4610      	mov	r0, r2
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	6811      	ldr	r1, [r2, #0]
 8000e46:	ea43 0200 	orr.w	r2, r3, r0
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	011b      	lsls	r3, r3, #4
 8000e4e:	440b      	add	r3, r1
 8000e50:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000e54:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	3318      	adds	r3, #24
 8000e5e:	011b      	lsls	r3, r3, #4
 8000e60:	4413      	add	r3, r2
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	6811      	ldr	r1, [r2, #0]
 8000e68:	f043 0201 	orr.w	r2, r3, #1
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	3318      	adds	r3, #24
 8000e70:	011b      	lsls	r3, r3, #4
 8000e72:	440b      	add	r3, r1
 8000e74:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e00e      	b.n	8000e98 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e7e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e006      	b.n	8000e98 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
  }
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3724      	adds	r7, #36	@ 0x24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr

08000ea2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b087      	sub	sp, #28
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eb6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000eb8:	7dfb      	ldrb	r3, [r7, #23]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d003      	beq.n	8000ec6 <HAL_CAN_GetRxMessage+0x24>
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	f040 8103 	bne.w	80010cc <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10e      	bne.n	8000eea <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d116      	bne.n	8000f08 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ede:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e0f7      	b.n	80010da <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	691b      	ldr	r3, [r3, #16]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d107      	bne.n	8000f08 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000efc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e0e8      	b.n	80010da <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	331b      	adds	r3, #27
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	4413      	add	r3, r2
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0204 	and.w	r2, r3, #4
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10c      	bne.n	8000f40 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	331b      	adds	r3, #27
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	4413      	add	r3, r2
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	0d5b      	lsrs	r3, r3, #21
 8000f36:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	e00b      	b.n	8000f58 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	331b      	adds	r3, #27
 8000f48:	011b      	lsls	r3, r3, #4
 8000f4a:	4413      	add	r3, r2
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	08db      	lsrs	r3, r3, #3
 8000f50:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	331b      	adds	r3, #27
 8000f60:	011b      	lsls	r3, r3, #4
 8000f62:	4413      	add	r3, r2
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0202 	and.w	r2, r3, #2
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	331b      	adds	r3, #27
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	4413      	add	r3, r2
 8000f7a:	3304      	adds	r3, #4
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0308 	and.w	r3, r3, #8
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2208      	movs	r2, #8
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	e00b      	b.n	8000fa6 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	331b      	adds	r3, #27
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	4413      	add	r3, r2
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 020f 	and.w	r2, r3, #15
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	331b      	adds	r3, #27
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	4413      	add	r3, r2
 8000fb2:	3304      	adds	r3, #4
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	0a1b      	lsrs	r3, r3, #8
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	331b      	adds	r3, #27
 8000fc6:	011b      	lsls	r3, r3, #4
 8000fc8:	4413      	add	r3, r2
 8000fca:	3304      	adds	r3, #4
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	0c1b      	lsrs	r3, r3, #16
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	4413      	add	r3, r2
 8000fe0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	011b      	lsls	r3, r3, #4
 8000ff4:	4413      	add	r3, r2
 8000ff6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	0a1a      	lsrs	r2, r3, #8
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	4413      	add	r3, r2
 8001010:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	0c1a      	lsrs	r2, r3, #16
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	3302      	adds	r3, #2
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	011b      	lsls	r3, r3, #4
 8001028:	4413      	add	r3, r2
 800102a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	0e1a      	lsrs	r2, r3, #24
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	3303      	adds	r3, #3
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	4413      	add	r3, r2
 8001044:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	3304      	adds	r3, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	4413      	add	r3, r2
 800105c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	0a1a      	lsrs	r2, r3, #8
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	3305      	adds	r3, #5
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	4413      	add	r3, r2
 8001076:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	0c1a      	lsrs	r2, r3, #16
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	3306      	adds	r3, #6
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	4413      	add	r3, r2
 8001090:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	0e1a      	lsrs	r2, r3, #24
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	3307      	adds	r3, #7
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d108      	bne.n	80010b8 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f042 0220 	orr.w	r2, r2, #32
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	e007      	b.n	80010c8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	691a      	ldr	r2, [r3, #16]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0220 	orr.w	r2, r2, #32
 80010c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	e006      	b.n	80010da <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
  }
}
 80010da:	4618      	mov	r0, r3
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d002      	beq.n	8001102 <HAL_CAN_ActivateNotification+0x1e>
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d109      	bne.n	8001116 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6959      	ldr	r1, [r3, #20]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	430a      	orrs	r2, r1
 8001110:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	e006      	b.n	8001124 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
  }
}
 8001124:	4618      	mov	r0, r3
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr

0800112e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b08a      	sub	sp, #40	@ 0x28
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d07c      	beq.n	800126e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d023      	beq.n	80011c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2201      	movs	r2, #1
 8001184:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f000 f983 	bl	800149c <HAL_CAN_TxMailbox0CompleteCallback>
 8001196:	e016      	b.n	80011c6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80011aa:	e00c      	b.n	80011c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d004      	beq.n	80011c0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80011be:	e002      	b.n	80011c6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f986 	bl	80014d2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d024      	beq.n	800121a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 f962 	bl	80014ae <HAL_CAN_TxMailbox1CompleteCallback>
 80011ea:	e016      	b.n	800121a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d004      	beq.n	8001200 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80011fe:	e00c      	b.n	800121a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800120a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001210:	627b      	str	r3, [r7, #36]	@ 0x24
 8001212:	e002      	b.n	800121a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f000 f965 	bl	80014e4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d024      	beq.n	800126e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800122c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 f941 	bl	80014c0 <HAL_CAN_TxMailbox2CompleteCallback>
 800123e:	e016      	b.n	800126e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d004      	beq.n	8001254 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800124a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
 8001252:	e00c      	b.n	800126e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d004      	beq.n	8001268 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800125e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001260:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
 8001266:	e002      	b.n	800126e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f944 	bl	80014f6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800126e:	6a3b      	ldr	r3, [r7, #32]
 8001270:	f003 0308 	and.w	r3, r3, #8
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00c      	beq.n	8001292 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f003 0310 	and.w	r3, r3, #16
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001284:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2210      	movs	r2, #16
 8001290:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001292:	6a3b      	ldr	r3, [r7, #32]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00b      	beq.n	80012b4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d006      	beq.n	80012b4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	2208      	movs	r2, #8
 80012ac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f92a 	bl	8001508 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d009      	beq.n	80012d2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7fe ff5b 	bl	8000188 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d00c      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d007      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80012e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012ec:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2210      	movs	r2, #16
 80012f4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	f003 0320 	and.w	r3, r3, #32
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00b      	beq.n	8001318 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d006      	beq.n	8001318 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2208      	movs	r2, #8
 8001310:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f90a 	bl	800152c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001318:	6a3b      	ldr	r3, [r7, #32]
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	2b00      	cmp	r3, #0
 8001320:	d009      	beq.n	8001336 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f8f2 	bl	800151a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00b      	beq.n	8001358 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2210      	movs	r2, #16
 8001350:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 f8f3 	bl	800153e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	2b00      	cmp	r3, #0
 800136a:	d006      	beq.n	800137a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2208      	movs	r2, #8
 8001372:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f8eb 	bl	8001550 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800137a:	6a3b      	ldr	r3, [r7, #32]
 800137c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d07b      	beq.n	800147c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	2b00      	cmp	r3, #0
 800138c:	d072      	beq.n	8001474 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001394:	2b00      	cmp	r3, #0
 8001396:	d008      	beq.n	80013aa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013aa:	6a3b      	ldr	r3, [r7, #32]
 80013ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d008      	beq.n	80013c6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013c6:	6a3b      	ldr	r3, [r7, #32]
 80013c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d008      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80013da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d043      	beq.n	8001474 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d03e      	beq.n	8001474 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80013fc:	2b60      	cmp	r3, #96	@ 0x60
 80013fe:	d02b      	beq.n	8001458 <HAL_CAN_IRQHandler+0x32a>
 8001400:	2b60      	cmp	r3, #96	@ 0x60
 8001402:	d82e      	bhi.n	8001462 <HAL_CAN_IRQHandler+0x334>
 8001404:	2b50      	cmp	r3, #80	@ 0x50
 8001406:	d022      	beq.n	800144e <HAL_CAN_IRQHandler+0x320>
 8001408:	2b50      	cmp	r3, #80	@ 0x50
 800140a:	d82a      	bhi.n	8001462 <HAL_CAN_IRQHandler+0x334>
 800140c:	2b40      	cmp	r3, #64	@ 0x40
 800140e:	d019      	beq.n	8001444 <HAL_CAN_IRQHandler+0x316>
 8001410:	2b40      	cmp	r3, #64	@ 0x40
 8001412:	d826      	bhi.n	8001462 <HAL_CAN_IRQHandler+0x334>
 8001414:	2b30      	cmp	r3, #48	@ 0x30
 8001416:	d010      	beq.n	800143a <HAL_CAN_IRQHandler+0x30c>
 8001418:	2b30      	cmp	r3, #48	@ 0x30
 800141a:	d822      	bhi.n	8001462 <HAL_CAN_IRQHandler+0x334>
 800141c:	2b10      	cmp	r3, #16
 800141e:	d002      	beq.n	8001426 <HAL_CAN_IRQHandler+0x2f8>
 8001420:	2b20      	cmp	r3, #32
 8001422:	d005      	beq.n	8001430 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001424:	e01d      	b.n	8001462 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001428:	f043 0308 	orr.w	r3, r3, #8
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800142e:	e019      	b.n	8001464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001432:	f043 0310 	orr.w	r3, r3, #16
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001438:	e014      	b.n	8001464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143c:	f043 0320 	orr.w	r3, r3, #32
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001442:	e00f      	b.n	8001464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800144c:	e00a      	b.n	8001464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800144e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001450:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001456:	e005      	b.n	8001464 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001460:	e000      	b.n	8001464 <HAL_CAN_IRQHandler+0x336>
            break;
 8001462:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699a      	ldr	r2, [r3, #24]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001472:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2204      	movs	r2, #4
 800147a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800147c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147e:	2b00      	cmp	r3, #0
 8001480:	d008      	beq.n	8001494 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f867 	bl	8001562 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	@ 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr

0800151a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr

0800153e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr

08001562 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001590:	4013      	ands	r3, r2
 8001592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800159c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a6:	4a04      	ldr	r2, [pc, #16]	@ (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	60d3      	str	r3, [r2, #12]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c0:	4b04      	ldr	r3, [pc, #16]	@ (80015d4 <__NVIC_GetPriorityGrouping+0x18>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	f003 0307 	and.w	r3, r3, #7
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	db0b      	blt.n	8001602 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f003 021f 	and.w	r2, r3, #31
 80015f0:	4906      	ldr	r1, [pc, #24]	@ (800160c <__NVIC_EnableIRQ+0x34>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	095b      	lsrs	r3, r3, #5
 80015f8:	2001      	movs	r0, #1
 80015fa:	fa00 f202 	lsl.w	r2, r0, r2
 80015fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	e000e100 	.word	0xe000e100

08001610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	6039      	str	r1, [r7, #0]
 800161a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	db0a      	blt.n	800163a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2da      	uxtb	r2, r3
 8001628:	490c      	ldr	r1, [pc, #48]	@ (800165c <__NVIC_SetPriority+0x4c>)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	0112      	lsls	r2, r2, #4
 8001630:	b2d2      	uxtb	r2, r2
 8001632:	440b      	add	r3, r1
 8001634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001638:	e00a      	b.n	8001650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	b2da      	uxtb	r2, r3
 800163e:	4908      	ldr	r1, [pc, #32]	@ (8001660 <__NVIC_SetPriority+0x50>)
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	3b04      	subs	r3, #4
 8001648:	0112      	lsls	r2, r2, #4
 800164a:	b2d2      	uxtb	r2, r2
 800164c:	440b      	add	r3, r1
 800164e:	761a      	strb	r2, [r3, #24]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000e100 	.word	0xe000e100
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b480      	push	{r7}
 8001666:	b089      	sub	sp, #36	@ 0x24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f1c3 0307 	rsb	r3, r3, #7
 800167e:	2b04      	cmp	r3, #4
 8001680:	bf28      	it	cs
 8001682:	2304      	movcs	r3, #4
 8001684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3304      	adds	r3, #4
 800168a:	2b06      	cmp	r3, #6
 800168c:	d902      	bls.n	8001694 <NVIC_EncodePriority+0x30>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3b03      	subs	r3, #3
 8001692:	e000      	b.n	8001696 <NVIC_EncodePriority+0x32>
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	f04f 32ff 	mov.w	r2, #4294967295
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	401a      	ands	r2, r3
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016ac:	f04f 31ff 	mov.w	r1, #4294967295
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa01 f303 	lsl.w	r3, r1, r3
 80016b6:	43d9      	mvns	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016bc:	4313      	orrs	r3, r2
         );
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3724      	adds	r7, #36	@ 0x24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	@ (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff90 	bl	8001610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff2d 	bl	8001574 <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001734:	f7ff ff42 	bl	80015bc <__NVIC_GetPriorityGrouping>
 8001738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	f7ff ff90 	bl	8001664 <NVIC_EncodePriority>
 8001744:	4602      	mov	r2, r0
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff5f 	bl	8001610 <__NVIC_SetPriority>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff35 	bl	80015d8 <__NVIC_EnableIRQ>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffa2 	bl	80016c8 <SysTick_Config>
 8001784:	4603      	mov	r3, r0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001790:	b480      	push	{r7}
 8001792:	b08b      	sub	sp, #44	@ 0x2c
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a2:	e169      	b.n	8001a78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017a4:	2201      	movs	r2, #1
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	429a      	cmp	r2, r3
 80017be:	f040 8158 	bne.w	8001a72 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4a9a      	ldr	r2, [pc, #616]	@ (8001a30 <HAL_GPIO_Init+0x2a0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d05e      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017cc:	4a98      	ldr	r2, [pc, #608]	@ (8001a30 <HAL_GPIO_Init+0x2a0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d875      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 80017d2:	4a98      	ldr	r2, [pc, #608]	@ (8001a34 <HAL_GPIO_Init+0x2a4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d058      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017d8:	4a96      	ldr	r2, [pc, #600]	@ (8001a34 <HAL_GPIO_Init+0x2a4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d86f      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 80017de:	4a96      	ldr	r2, [pc, #600]	@ (8001a38 <HAL_GPIO_Init+0x2a8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d052      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017e4:	4a94      	ldr	r2, [pc, #592]	@ (8001a38 <HAL_GPIO_Init+0x2a8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d869      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 80017ea:	4a94      	ldr	r2, [pc, #592]	@ (8001a3c <HAL_GPIO_Init+0x2ac>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d04c      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017f0:	4a92      	ldr	r2, [pc, #584]	@ (8001a3c <HAL_GPIO_Init+0x2ac>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d863      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 80017f6:	4a92      	ldr	r2, [pc, #584]	@ (8001a40 <HAL_GPIO_Init+0x2b0>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d046      	beq.n	800188a <HAL_GPIO_Init+0xfa>
 80017fc:	4a90      	ldr	r2, [pc, #576]	@ (8001a40 <HAL_GPIO_Init+0x2b0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d85d      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 8001802:	2b12      	cmp	r3, #18
 8001804:	d82a      	bhi.n	800185c <HAL_GPIO_Init+0xcc>
 8001806:	2b12      	cmp	r3, #18
 8001808:	d859      	bhi.n	80018be <HAL_GPIO_Init+0x12e>
 800180a:	a201      	add	r2, pc, #4	@ (adr r2, 8001810 <HAL_GPIO_Init+0x80>)
 800180c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001810:	0800188b 	.word	0x0800188b
 8001814:	08001865 	.word	0x08001865
 8001818:	08001877 	.word	0x08001877
 800181c:	080018b9 	.word	0x080018b9
 8001820:	080018bf 	.word	0x080018bf
 8001824:	080018bf 	.word	0x080018bf
 8001828:	080018bf 	.word	0x080018bf
 800182c:	080018bf 	.word	0x080018bf
 8001830:	080018bf 	.word	0x080018bf
 8001834:	080018bf 	.word	0x080018bf
 8001838:	080018bf 	.word	0x080018bf
 800183c:	080018bf 	.word	0x080018bf
 8001840:	080018bf 	.word	0x080018bf
 8001844:	080018bf 	.word	0x080018bf
 8001848:	080018bf 	.word	0x080018bf
 800184c:	080018bf 	.word	0x080018bf
 8001850:	080018bf 	.word	0x080018bf
 8001854:	0800186d 	.word	0x0800186d
 8001858:	08001881 	.word	0x08001881
 800185c:	4a79      	ldr	r2, [pc, #484]	@ (8001a44 <HAL_GPIO_Init+0x2b4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001862:	e02c      	b.n	80018be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e029      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	3304      	adds	r3, #4
 8001872:	623b      	str	r3, [r7, #32]
          break;
 8001874:	e024      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	3308      	adds	r3, #8
 800187c:	623b      	str	r3, [r7, #32]
          break;
 800187e:	e01f      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	330c      	adds	r3, #12
 8001886:	623b      	str	r3, [r7, #32]
          break;
 8001888:	e01a      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d102      	bne.n	8001898 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001892:	2304      	movs	r3, #4
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e013      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d105      	bne.n	80018ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a0:	2308      	movs	r3, #8
 80018a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	611a      	str	r2, [r3, #16]
          break;
 80018aa:	e009      	b.n	80018c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018ac:	2308      	movs	r3, #8
 80018ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	615a      	str	r2, [r3, #20]
          break;
 80018b6:	e003      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
          break;
 80018bc:	e000      	b.n	80018c0 <HAL_GPIO_Init+0x130>
          break;
 80018be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2bff      	cmp	r3, #255	@ 0xff
 80018c4:	d801      	bhi.n	80018ca <HAL_GPIO_Init+0x13a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	e001      	b.n	80018ce <HAL_GPIO_Init+0x13e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3304      	adds	r3, #4
 80018ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2bff      	cmp	r3, #255	@ 0xff
 80018d4:	d802      	bhi.n	80018dc <HAL_GPIO_Init+0x14c>
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	e002      	b.n	80018e2 <HAL_GPIO_Init+0x152>
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	3b08      	subs	r3, #8
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	210f      	movs	r1, #15
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	fa01 f303 	lsl.w	r3, r1, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	401a      	ands	r2, r3
 80018f4:	6a39      	ldr	r1, [r7, #32]
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	431a      	orrs	r2, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80b1 	beq.w	8001a72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001910:	4b4d      	ldr	r3, [pc, #308]	@ (8001a48 <HAL_GPIO_Init+0x2b8>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	4a4c      	ldr	r2, [pc, #304]	@ (8001a48 <HAL_GPIO_Init+0x2b8>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6193      	str	r3, [r2, #24]
 800191c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a48 <HAL_GPIO_Init+0x2b8>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001928:	4a48      	ldr	r2, [pc, #288]	@ (8001a4c <HAL_GPIO_Init+0x2bc>)
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	3302      	adds	r3, #2
 8001930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001934:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	220f      	movs	r2, #15
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a40      	ldr	r2, [pc, #256]	@ (8001a50 <HAL_GPIO_Init+0x2c0>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d013      	beq.n	800197c <HAL_GPIO_Init+0x1ec>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a3f      	ldr	r2, [pc, #252]	@ (8001a54 <HAL_GPIO_Init+0x2c4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d00d      	beq.n	8001978 <HAL_GPIO_Init+0x1e8>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a58 <HAL_GPIO_Init+0x2c8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d007      	beq.n	8001974 <HAL_GPIO_Init+0x1e4>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a3d      	ldr	r2, [pc, #244]	@ (8001a5c <HAL_GPIO_Init+0x2cc>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d101      	bne.n	8001970 <HAL_GPIO_Init+0x1e0>
 800196c:	2303      	movs	r3, #3
 800196e:	e006      	b.n	800197e <HAL_GPIO_Init+0x1ee>
 8001970:	2304      	movs	r3, #4
 8001972:	e004      	b.n	800197e <HAL_GPIO_Init+0x1ee>
 8001974:	2302      	movs	r3, #2
 8001976:	e002      	b.n	800197e <HAL_GPIO_Init+0x1ee>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <HAL_GPIO_Init+0x1ee>
 800197c:	2300      	movs	r3, #0
 800197e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001980:	f002 0203 	and.w	r2, r2, #3
 8001984:	0092      	lsls	r2, r2, #2
 8001986:	4093      	lsls	r3, r2
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800198e:	492f      	ldr	r1, [pc, #188]	@ (8001a4c <HAL_GPIO_Init+0x2bc>)
 8001990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001992:	089b      	lsrs	r3, r3, #2
 8001994:	3302      	adds	r3, #2
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	492c      	ldr	r1, [pc, #176]	@ (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	43db      	mvns	r3, r3
 80019be:	4928      	ldr	r1, [pc, #160]	@ (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019d0:	4b23      	ldr	r3, [pc, #140]	@ (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	4922      	ldr	r1, [pc, #136]	@ (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	60cb      	str	r3, [r1, #12]
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019de:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019e0:	68da      	ldr	r2, [r3, #12]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	491e      	ldr	r1, [pc, #120]	@ (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	4918      	ldr	r1, [pc, #96]	@ (8001a60 <HAL_GPIO_Init+0x2d0>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]
 8001a04:	e006      	b.n	8001a14 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a06:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <HAL_GPIO_Init+0x2d0>)
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	4914      	ldr	r1, [pc, #80]	@ (8001a60 <HAL_GPIO_Init+0x2d0>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d021      	beq.n	8001a64 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a20:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <HAL_GPIO_Init+0x2d0>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	490e      	ldr	r1, [pc, #56]	@ (8001a60 <HAL_GPIO_Init+0x2d0>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	600b      	str	r3, [r1, #0]
 8001a2c:	e021      	b.n	8001a72 <HAL_GPIO_Init+0x2e2>
 8001a2e:	bf00      	nop
 8001a30:	10320000 	.word	0x10320000
 8001a34:	10310000 	.word	0x10310000
 8001a38:	10220000 	.word	0x10220000
 8001a3c:	10210000 	.word	0x10210000
 8001a40:	10120000 	.word	0x10120000
 8001a44:	10110000 	.word	0x10110000
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	40010800 	.word	0x40010800
 8001a54:	40010c00 	.word	0x40010c00
 8001a58:	40011000 	.word	0x40011000
 8001a5c:	40011400 	.word	0x40011400
 8001a60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a64:	4b0b      	ldr	r3, [pc, #44]	@ (8001a94 <HAL_GPIO_Init+0x304>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	4909      	ldr	r1, [pc, #36]	@ (8001a94 <HAL_GPIO_Init+0x304>)
 8001a6e:	4013      	ands	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	3301      	adds	r3, #1
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f47f ae8e 	bne.w	80017a4 <HAL_GPIO_Init+0x14>
  }
}
 8001a88:	bf00      	nop
 8001a8a:	bf00      	nop
 8001a8c:	372c      	adds	r7, #44	@ 0x2c
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	40010400 	.word	0x40010400

08001a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa8:	787b      	ldrb	r3, [r7, #1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ab4:	e003      	b.n	8001abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ab6:	887b      	ldrh	r3, [r7, #2]
 8001ab8:	041a      	lsls	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	611a      	str	r2, [r3, #16]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ada:	887a      	ldrh	r2, [r7, #2]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	041a      	lsls	r2, r3, #16
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43d9      	mvns	r1, r3
 8001ae6:	887b      	ldrh	r3, [r7, #2]
 8001ae8:	400b      	ands	r3, r1
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	611a      	str	r2, [r3, #16]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
	...

08001afc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b06:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d006      	beq.n	8001b20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b12:	4a05      	ldr	r2, [pc, #20]	@ (8001b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 f806 	bl	8001b2c <HAL_GPIO_EXTI_Callback>
  }
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40010400 	.word	0x40010400

08001b2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e272      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 8087 	beq.w	8001c6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b60:	4b92      	ldr	r3, [pc, #584]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d00c      	beq.n	8001b86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b6c:	4b8f      	ldr	r3, [pc, #572]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d112      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5e>
 8001b78:	4b8c      	ldr	r3, [pc, #560]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b84:	d10b      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b86:	4b89      	ldr	r3, [pc, #548]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d06c      	beq.n	8001c6c <HAL_RCC_OscConfig+0x12c>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d168      	bne.n	8001c6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e24c      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba6:	d106      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x76>
 8001ba8:	4b80      	ldr	r3, [pc, #512]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a7f      	ldr	r2, [pc, #508]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	e02e      	b.n	8001c14 <HAL_RCC_OscConfig+0xd4>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x98>
 8001bbe:	4b7b      	ldr	r3, [pc, #492]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a7a      	ldr	r2, [pc, #488]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	4b78      	ldr	r3, [pc, #480]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a77      	ldr	r2, [pc, #476]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e01d      	b.n	8001c14 <HAL_RCC_OscConfig+0xd4>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0xbc>
 8001be2:	4b72      	ldr	r3, [pc, #456]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a71      	ldr	r2, [pc, #452]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b6f      	ldr	r3, [pc, #444]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a6e      	ldr	r2, [pc, #440]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e00b      	b.n	8001c14 <HAL_RCC_OscConfig+0xd4>
 8001bfc:	4b6b      	ldr	r3, [pc, #428]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a6a      	ldr	r2, [pc, #424]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b68      	ldr	r3, [pc, #416]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a67      	ldr	r2, [pc, #412]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d013      	beq.n	8001c44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7fe fe60 	bl	80008e0 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7fe fe5c 	bl	80008e0 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	@ 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e200      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	4b5d      	ldr	r3, [pc, #372]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0xe4>
 8001c42:	e014      	b.n	8001c6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7fe fe4c 	bl	80008e0 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c4c:	f7fe fe48 	bl	80008e0 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b64      	cmp	r3, #100	@ 0x64
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e1ec      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5e:	4b53      	ldr	r3, [pc, #332]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x10c>
 8001c6a:	e000      	b.n	8001c6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d063      	beq.n	8001d42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c7a:	4b4c      	ldr	r3, [pc, #304]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00b      	beq.n	8001c9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c86:	4b49      	ldr	r3, [pc, #292]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d11c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x18c>
 8001c92:	4b46      	ldr	r3, [pc, #280]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d116      	bne.n	8001ccc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9e:	4b43      	ldr	r3, [pc, #268]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x176>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e1c0      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb6:	4b3d      	ldr	r3, [pc, #244]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4939      	ldr	r1, [pc, #228]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cca:	e03a      	b.n	8001d42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d020      	beq.n	8001d16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd4:	4b36      	ldr	r3, [pc, #216]	@ (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7fe fe01 	bl	80008e0 <HAL_GetTick>
 8001cde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce2:	f7fe fdfd 	bl	80008e0 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e1a1      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d00:	4b2a      	ldr	r3, [pc, #168]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	4927      	ldr	r1, [pc, #156]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]
 8001d14:	e015      	b.n	8001d42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d16:	4b26      	ldr	r3, [pc, #152]	@ (8001db0 <HAL_RCC_OscConfig+0x270>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7fe fde0 	bl	80008e0 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d24:	f7fe fddc 	bl	80008e0 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e180      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d36:	4b1d      	ldr	r3, [pc, #116]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d03a      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d019      	beq.n	8001d8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d56:	4b17      	ldr	r3, [pc, #92]	@ (8001db4 <HAL_RCC_OscConfig+0x274>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5c:	f7fe fdc0 	bl	80008e0 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d64:	f7fe fdbc 	bl	80008e0 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e160      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d76:	4b0d      	ldr	r3, [pc, #52]	@ (8001dac <HAL_RCC_OscConfig+0x26c>)
 8001d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d82:	2001      	movs	r0, #1
 8001d84:	f000 face 	bl	8002324 <RCC_Delay>
 8001d88:	e01c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001db4 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d90:	f7fe fda6 	bl	80008e0 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d96:	e00f      	b.n	8001db8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d98:	f7fe fda2 	bl	80008e0 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d908      	bls.n	8001db8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e146      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
 8001daa:	bf00      	nop
 8001dac:	40021000 	.word	0x40021000
 8001db0:	42420000 	.word	0x42420000
 8001db4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db8:	4b92      	ldr	r3, [pc, #584]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1e9      	bne.n	8001d98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80a6 	beq.w	8001f1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd6:	4b8b      	ldr	r3, [pc, #556]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10d      	bne.n	8001dfe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	4b88      	ldr	r3, [pc, #544]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	4a87      	ldr	r2, [pc, #540]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dec:	61d3      	str	r3, [r2, #28]
 8001dee:	4b85      	ldr	r3, [pc, #532]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	4b82      	ldr	r3, [pc, #520]	@ (8002008 <HAL_RCC_OscConfig+0x4c8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d118      	bne.n	8001e3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002008 <HAL_RCC_OscConfig+0x4c8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a7e      	ldr	r2, [pc, #504]	@ (8002008 <HAL_RCC_OscConfig+0x4c8>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e16:	f7fe fd63 	bl	80008e0 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1e:	f7fe fd5f 	bl	80008e0 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b64      	cmp	r3, #100	@ 0x64
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e103      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e30:	4b75      	ldr	r3, [pc, #468]	@ (8002008 <HAL_RCC_OscConfig+0x4c8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x312>
 8001e44:	4b6f      	ldr	r3, [pc, #444]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4a6e      	ldr	r2, [pc, #440]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6213      	str	r3, [r2, #32]
 8001e50:	e02d      	b.n	8001eae <HAL_RCC_OscConfig+0x36e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x334>
 8001e5a:	4b6a      	ldr	r3, [pc, #424]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a69      	ldr	r2, [pc, #420]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	4b67      	ldr	r3, [pc, #412]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4a66      	ldr	r2, [pc, #408]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	f023 0304 	bic.w	r3, r3, #4
 8001e70:	6213      	str	r3, [r2, #32]
 8001e72:	e01c      	b.n	8001eae <HAL_RCC_OscConfig+0x36e>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	2b05      	cmp	r3, #5
 8001e7a:	d10c      	bne.n	8001e96 <HAL_RCC_OscConfig+0x356>
 8001e7c:	4b61      	ldr	r3, [pc, #388]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4a60      	ldr	r2, [pc, #384]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	6213      	str	r3, [r2, #32]
 8001e88:	4b5e      	ldr	r3, [pc, #376]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4a5d      	ldr	r2, [pc, #372]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6213      	str	r3, [r2, #32]
 8001e94:	e00b      	b.n	8001eae <HAL_RCC_OscConfig+0x36e>
 8001e96:	4b5b      	ldr	r3, [pc, #364]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4a5a      	ldr	r2, [pc, #360]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	6213      	str	r3, [r2, #32]
 8001ea2:	4b58      	ldr	r3, [pc, #352]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	4a57      	ldr	r2, [pc, #348]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	f023 0304 	bic.w	r3, r3, #4
 8001eac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d015      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb6:	f7fe fd13 	bl	80008e0 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebe:	f7fe fd0f 	bl	80008e0 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e0b1      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0ee      	beq.n	8001ebe <HAL_RCC_OscConfig+0x37e>
 8001ee0:	e014      	b.n	8001f0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee2:	f7fe fcfd 	bl	80008e0 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eea:	f7fe fcf9 	bl	80008e0 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e09b      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f00:	4b40      	ldr	r3, [pc, #256]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1ee      	bne.n	8001eea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f0c:	7dfb      	ldrb	r3, [r7, #23]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d105      	bne.n	8001f1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f12:	4b3c      	ldr	r3, [pc, #240]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4a3b      	ldr	r2, [pc, #236]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 8087 	beq.w	8002036 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f28:	4b36      	ldr	r3, [pc, #216]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d061      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d146      	bne.n	8001fca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3c:	4b33      	ldr	r3, [pc, #204]	@ (800200c <HAL_RCC_OscConfig+0x4cc>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7fe fccd 	bl	80008e0 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7fe fcc9 	bl	80008e0 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e06d      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f5c:	4b29      	ldr	r3, [pc, #164]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f0      	bne.n	8001f4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f70:	d108      	bne.n	8001f84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f72:	4b24      	ldr	r3, [pc, #144]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	4921      	ldr	r1, [pc, #132]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f84:	4b1f      	ldr	r3, [pc, #124]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a19      	ldr	r1, [r3, #32]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f94:	430b      	orrs	r3, r1
 8001f96:	491b      	ldr	r1, [pc, #108]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800200c <HAL_RCC_OscConfig+0x4cc>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7fe fc9d 	bl	80008e0 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa8:	e008      	b.n	8001fbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001faa:	f7fe fc99 	bl	80008e0 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e03d      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fbc:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCC_OscConfig+0x46a>
 8001fc8:	e035      	b.n	8002036 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fca:	4b10      	ldr	r3, [pc, #64]	@ (800200c <HAL_RCC_OscConfig+0x4cc>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd0:	f7fe fc86 	bl	80008e0 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7fe fc82 	bl	80008e0 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e026      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_RCC_OscConfig+0x4c4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x498>
 8001ff6:	e01e      	b.n	8002036 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e019      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
 8002004:	40021000 	.word	0x40021000
 8002008:	40007000 	.word	0x40007000
 800200c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002010:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <HAL_RCC_OscConfig+0x500>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	429a      	cmp	r2, r3
 8002022:	d106      	bne.n	8002032 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202e:	429a      	cmp	r2, r3
 8002030:	d001      	beq.n	8002036 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40021000 	.word	0x40021000

08002044 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0d0      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002058:	4b6a      	ldr	r3, [pc, #424]	@ (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d910      	bls.n	8002088 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b67      	ldr	r3, [pc, #412]	@ (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 0207 	bic.w	r2, r3, #7
 800206e:	4965      	ldr	r1, [pc, #404]	@ (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b63      	ldr	r3, [pc, #396]	@ (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0b8      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d020      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a0:	4b59      	ldr	r3, [pc, #356]	@ (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a58      	ldr	r2, [pc, #352]	@ (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80020aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b8:	4b53      	ldr	r3, [pc, #332]	@ (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a52      	ldr	r2, [pc, #328]	@ (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80020c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c4:	4b50      	ldr	r3, [pc, #320]	@ (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	494d      	ldr	r1, [pc, #308]	@ (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d040      	beq.n	8002164 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	4b47      	ldr	r3, [pc, #284]	@ (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d115      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e07f      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002102:	4b41      	ldr	r3, [pc, #260]	@ (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d109      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e073      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002112:	4b3d      	ldr	r3, [pc, #244]	@ (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e06b      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002122:	4b39      	ldr	r3, [pc, #228]	@ (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f023 0203 	bic.w	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	4936      	ldr	r1, [pc, #216]	@ (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002134:	f7fe fbd4 	bl	80008e0 <HAL_GetTick>
 8002138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	e00a      	b.n	8002152 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800213c:	f7fe fbd0 	bl	80008e0 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214a:	4293      	cmp	r3, r2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e053      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	4b2d      	ldr	r3, [pc, #180]	@ (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 020c 	and.w	r2, r3, #12
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	429a      	cmp	r2, r3
 8002162:	d1eb      	bne.n	800213c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002164:	4b27      	ldr	r3, [pc, #156]	@ (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d210      	bcs.n	8002194 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b24      	ldr	r3, [pc, #144]	@ (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 0207 	bic.w	r2, r3, #7
 800217a:	4922      	ldr	r1, [pc, #136]	@ (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <HAL_RCC_ClockConfig+0x1c0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e032      	b.n	80021fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a0:	4b19      	ldr	r3, [pc, #100]	@ (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4916      	ldr	r1, [pc, #88]	@ (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d009      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021be:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	490e      	ldr	r1, [pc, #56]	@ (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021d2:	f000 f821 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80021d6:	4602      	mov	r2, r0
 80021d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	490a      	ldr	r1, [pc, #40]	@ (800220c <HAL_RCC_ClockConfig+0x1c8>)
 80021e4:	5ccb      	ldrb	r3, [r1, r3]
 80021e6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ea:	4a09      	ldr	r2, [pc, #36]	@ (8002210 <HAL_RCC_ClockConfig+0x1cc>)
 80021ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ee:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <HAL_RCC_ClockConfig+0x1d0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fb32 	bl	800085c <HAL_InitTick>

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40022000 	.word	0x40022000
 8002208:	40021000 	.word	0x40021000
 800220c:	0800316c 	.word	0x0800316c
 8002210:	20000000 	.word	0x20000000
 8002214:	20000004 	.word	0x20000004

08002218 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002232:	4b1e      	ldr	r3, [pc, #120]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b04      	cmp	r3, #4
 8002240:	d002      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x30>
 8002242:	2b08      	cmp	r3, #8
 8002244:	d003      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x36>
 8002246:	e027      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002248:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800224a:	613b      	str	r3, [r7, #16]
      break;
 800224c:	e027      	b.n	800229e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	0c9b      	lsrs	r3, r3, #18
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	4a17      	ldr	r2, [pc, #92]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002258:	5cd3      	ldrb	r3, [r2, r3]
 800225a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d010      	beq.n	8002288 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002266:	4b11      	ldr	r3, [pc, #68]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	0c5b      	lsrs	r3, r3, #17
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	4a11      	ldr	r2, [pc, #68]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a0d      	ldr	r2, [pc, #52]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800227a:	fb03 f202 	mul.w	r2, r3, r2
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	fbb2 f3f3 	udiv	r3, r2, r3
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e004      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a0c      	ldr	r2, [pc, #48]	@ (80022bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	613b      	str	r3, [r7, #16]
      break;
 8002296:	e002      	b.n	800229e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800229a:	613b      	str	r3, [r7, #16]
      break;
 800229c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800229e:	693b      	ldr	r3, [r7, #16]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	007a1200 	.word	0x007a1200
 80022b4:	08003184 	.word	0x08003184
 80022b8:	08003194 	.word	0x08003194
 80022bc:	003d0900 	.word	0x003d0900

080022c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c4:	4b02      	ldr	r3, [pc, #8]	@ (80022d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr
 80022d0:	20000000 	.word	0x20000000

080022d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022d8:	f7ff fff2 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b05      	ldr	r3, [pc, #20]	@ (80022f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	0a1b      	lsrs	r3, r3, #8
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	4903      	ldr	r1, [pc, #12]	@ (80022f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	0800317c 	.word	0x0800317c

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002300:	f7ff ffde 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b05      	ldr	r3, [pc, #20]	@ (800231c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4903      	ldr	r1, [pc, #12]	@ (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002318:	4618      	mov	r0, r3
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40021000 	.word	0x40021000
 8002320:	0800317c 	.word	0x0800317c

08002324 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800232c:	4b0a      	ldr	r3, [pc, #40]	@ (8002358 <RCC_Delay+0x34>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0a      	ldr	r2, [pc, #40]	@ (800235c <RCC_Delay+0x38>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	0a5b      	lsrs	r3, r3, #9
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	fb02 f303 	mul.w	r3, r2, r3
 800233e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002340:	bf00      	nop
  }
  while (Delay --);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	1e5a      	subs	r2, r3, #1
 8002346:	60fa      	str	r2, [r7, #12]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f9      	bne.n	8002340 <RCC_Delay+0x1c>
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	20000000 	.word	0x20000000
 800235c:	10624dd3 	.word	0x10624dd3

08002360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e042      	b.n	80023f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7fe f956 	bl	8000638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2224      	movs	r2, #36	@ 0x24
 8002390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f971 	bl	800268c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	@ 0x28
 8002404:	af02      	add	r7, sp, #8
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	4613      	mov	r3, r2
 800240e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b20      	cmp	r3, #32
 800241e:	d175      	bne.n	800250c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <HAL_UART_Transmit+0x2c>
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e06e      	b.n	800250e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2221      	movs	r2, #33	@ 0x21
 800243a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800243e:	f7fe fa4f 	bl	80008e0 <HAL_GetTick>
 8002442:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	88fa      	ldrh	r2, [r7, #6]
 8002448:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	88fa      	ldrh	r2, [r7, #6]
 800244e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002458:	d108      	bne.n	800246c <HAL_UART_Transmit+0x6c>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d104      	bne.n	800246c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	e003      	b.n	8002474 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002470:	2300      	movs	r3, #0
 8002472:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002474:	e02e      	b.n	80024d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2200      	movs	r2, #0
 800247e:	2180      	movs	r1, #128	@ 0x80
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 f848 	bl	8002516 <UART_WaitOnFlagUntilTimeout>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e03a      	b.n	800250e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10b      	bne.n	80024b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	881b      	ldrh	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	3302      	adds	r3, #2
 80024b2:	61bb      	str	r3, [r7, #24]
 80024b4:	e007      	b.n	80024c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	3301      	adds	r3, #1
 80024c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1cb      	bne.n	8002476 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2200      	movs	r2, #0
 80024e6:	2140      	movs	r1, #64	@ 0x40
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 f814 	bl	8002516 <UART_WaitOnFlagUntilTimeout>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e006      	b.n	800250e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	e000      	b.n	800250e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	3720      	adds	r7, #32
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	60f8      	str	r0, [r7, #12]
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	4613      	mov	r3, r2
 8002524:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002526:	e03b      	b.n	80025a0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252e:	d037      	beq.n	80025a0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002530:	f7fe f9d6 	bl	80008e0 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	6a3a      	ldr	r2, [r7, #32]
 800253c:	429a      	cmp	r2, r3
 800253e:	d302      	bcc.n	8002546 <UART_WaitOnFlagUntilTimeout+0x30>
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e03a      	b.n	80025c0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	d023      	beq.n	80025a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b80      	cmp	r3, #128	@ 0x80
 800255c:	d020      	beq.n	80025a0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b40      	cmp	r3, #64	@ 0x40
 8002562:	d01d      	beq.n	80025a0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b08      	cmp	r3, #8
 8002570:	d116      	bne.n	80025a0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 f81d 	bl	80025c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2208      	movs	r2, #8
 8002592:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e00f      	b.n	80025c0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	4013      	ands	r3, r2
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	bf0c      	ite	eq
 80025b0:	2301      	moveq	r3, #1
 80025b2:	2300      	movne	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d0b4      	beq.n	8002528 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b095      	sub	sp, #84	@ 0x54
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	330c      	adds	r3, #12
 80025d6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025da:	e853 3f00 	ldrex	r3, [r3]
 80025de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	330c      	adds	r3, #12
 80025ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80025f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80025f8:	e841 2300 	strex	r3, r2, [r1]
 80025fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80025fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1e5      	bne.n	80025d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	3314      	adds	r3, #20
 800260a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	e853 3f00 	ldrex	r3, [r3]
 8002612:	61fb      	str	r3, [r7, #28]
   return(result);
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f023 0301 	bic.w	r3, r3, #1
 800261a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3314      	adds	r3, #20
 8002622:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002624:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002626:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800262a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800262c:	e841 2300 	strex	r3, r2, [r1]
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e5      	bne.n	8002604 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263c:	2b01      	cmp	r3, #1
 800263e:	d119      	bne.n	8002674 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	330c      	adds	r3, #12
 8002646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	e853 3f00 	ldrex	r3, [r3]
 800264e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f023 0310 	bic.w	r3, r3, #16
 8002656:	647b      	str	r3, [r7, #68]	@ 0x44
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	330c      	adds	r3, #12
 800265e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002660:	61ba      	str	r2, [r7, #24]
 8002662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002664:	6979      	ldr	r1, [r7, #20]
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	e841 2300 	strex	r3, r2, [r1]
 800266c:	613b      	str	r3, [r7, #16]
   return(result);
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e5      	bne.n	8002640 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2220      	movs	r2, #32
 8002678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002682:	bf00      	nop
 8002684:	3754      	adds	r7, #84	@ 0x54
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689a      	ldr	r2, [r3, #8]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80026c6:	f023 030c 	bic.w	r3, r3, #12
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	430b      	orrs	r3, r1
 80026d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a2c      	ldr	r2, [pc, #176]	@ (80027a0 <UART_SetConfig+0x114>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d103      	bne.n	80026fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026f4:	f7ff fe02 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	e002      	b.n	8002702 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026fc:	f7ff fdea 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 8002700:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	009a      	lsls	r2, r3, #2
 800270c:	441a      	add	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	fbb2 f3f3 	udiv	r3, r2, r3
 8002718:	4a22      	ldr	r2, [pc, #136]	@ (80027a4 <UART_SetConfig+0x118>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	0119      	lsls	r1, r3, #4
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	009a      	lsls	r2, r3, #2
 800272c:	441a      	add	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	fbb2 f2f3 	udiv	r2, r2, r3
 8002738:	4b1a      	ldr	r3, [pc, #104]	@ (80027a4 <UART_SetConfig+0x118>)
 800273a:	fba3 0302 	umull	r0, r3, r3, r2
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	2064      	movs	r0, #100	@ 0x64
 8002742:	fb00 f303 	mul.w	r3, r0, r3
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	3332      	adds	r3, #50	@ 0x32
 800274c:	4a15      	ldr	r2, [pc, #84]	@ (80027a4 <UART_SetConfig+0x118>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	095b      	lsrs	r3, r3, #5
 8002754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002758:	4419      	add	r1, r3
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	009a      	lsls	r2, r3, #2
 8002764:	441a      	add	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002770:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <UART_SetConfig+0x118>)
 8002772:	fba3 0302 	umull	r0, r3, r3, r2
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	2064      	movs	r0, #100	@ 0x64
 800277a:	fb00 f303 	mul.w	r3, r0, r3
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	3332      	adds	r3, #50	@ 0x32
 8002784:	4a07      	ldr	r2, [pc, #28]	@ (80027a4 <UART_SetConfig+0x118>)
 8002786:	fba2 2303 	umull	r2, r3, r2, r3
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	f003 020f 	and.w	r2, r3, #15
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	440a      	add	r2, r1
 8002796:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40013800 	.word	0x40013800
 80027a4:	51eb851f 	.word	0x51eb851f

080027a8 <sniprintf>:
 80027a8:	b40c      	push	{r2, r3}
 80027aa:	b530      	push	{r4, r5, lr}
 80027ac:	4b18      	ldr	r3, [pc, #96]	@ (8002810 <sniprintf+0x68>)
 80027ae:	1e0c      	subs	r4, r1, #0
 80027b0:	681d      	ldr	r5, [r3, #0]
 80027b2:	b09d      	sub	sp, #116	@ 0x74
 80027b4:	da08      	bge.n	80027c8 <sniprintf+0x20>
 80027b6:	238b      	movs	r3, #139	@ 0x8b
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295
 80027bc:	602b      	str	r3, [r5, #0]
 80027be:	b01d      	add	sp, #116	@ 0x74
 80027c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80027c4:	b002      	add	sp, #8
 80027c6:	4770      	bx	lr
 80027c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80027cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80027d6:	bf0c      	ite	eq
 80027d8:	4623      	moveq	r3, r4
 80027da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80027de:	9304      	str	r3, [sp, #16]
 80027e0:	9307      	str	r3, [sp, #28]
 80027e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027e6:	9002      	str	r0, [sp, #8]
 80027e8:	9006      	str	r0, [sp, #24]
 80027ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80027ee:	4628      	mov	r0, r5
 80027f0:	ab21      	add	r3, sp, #132	@ 0x84
 80027f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80027f4:	a902      	add	r1, sp, #8
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	f000 f992 	bl	8002b20 <_svfiprintf_r>
 80027fc:	1c43      	adds	r3, r0, #1
 80027fe:	bfbc      	itt	lt
 8002800:	238b      	movlt	r3, #139	@ 0x8b
 8002802:	602b      	strlt	r3, [r5, #0]
 8002804:	2c00      	cmp	r4, #0
 8002806:	d0da      	beq.n	80027be <sniprintf+0x16>
 8002808:	2200      	movs	r2, #0
 800280a:	9b02      	ldr	r3, [sp, #8]
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	e7d6      	b.n	80027be <sniprintf+0x16>
 8002810:	2000000c 	.word	0x2000000c

08002814 <memset>:
 8002814:	4603      	mov	r3, r0
 8002816:	4402      	add	r2, r0
 8002818:	4293      	cmp	r3, r2
 800281a:	d100      	bne.n	800281e <memset+0xa>
 800281c:	4770      	bx	lr
 800281e:	f803 1b01 	strb.w	r1, [r3], #1
 8002822:	e7f9      	b.n	8002818 <memset+0x4>

08002824 <__errno>:
 8002824:	4b01      	ldr	r3, [pc, #4]	@ (800282c <__errno+0x8>)
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	2000000c 	.word	0x2000000c

08002830 <__libc_init_array>:
 8002830:	b570      	push	{r4, r5, r6, lr}
 8002832:	2600      	movs	r6, #0
 8002834:	4d0c      	ldr	r5, [pc, #48]	@ (8002868 <__libc_init_array+0x38>)
 8002836:	4c0d      	ldr	r4, [pc, #52]	@ (800286c <__libc_init_array+0x3c>)
 8002838:	1b64      	subs	r4, r4, r5
 800283a:	10a4      	asrs	r4, r4, #2
 800283c:	42a6      	cmp	r6, r4
 800283e:	d109      	bne.n	8002854 <__libc_init_array+0x24>
 8002840:	f000 fc76 	bl	8003130 <_init>
 8002844:	2600      	movs	r6, #0
 8002846:	4d0a      	ldr	r5, [pc, #40]	@ (8002870 <__libc_init_array+0x40>)
 8002848:	4c0a      	ldr	r4, [pc, #40]	@ (8002874 <__libc_init_array+0x44>)
 800284a:	1b64      	subs	r4, r4, r5
 800284c:	10a4      	asrs	r4, r4, #2
 800284e:	42a6      	cmp	r6, r4
 8002850:	d105      	bne.n	800285e <__libc_init_array+0x2e>
 8002852:	bd70      	pop	{r4, r5, r6, pc}
 8002854:	f855 3b04 	ldr.w	r3, [r5], #4
 8002858:	4798      	blx	r3
 800285a:	3601      	adds	r6, #1
 800285c:	e7ee      	b.n	800283c <__libc_init_array+0xc>
 800285e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002862:	4798      	blx	r3
 8002864:	3601      	adds	r6, #1
 8002866:	e7f2      	b.n	800284e <__libc_init_array+0x1e>
 8002868:	080031cc 	.word	0x080031cc
 800286c:	080031cc 	.word	0x080031cc
 8002870:	080031cc 	.word	0x080031cc
 8002874:	080031d0 	.word	0x080031d0

08002878 <__retarget_lock_acquire_recursive>:
 8002878:	4770      	bx	lr

0800287a <__retarget_lock_release_recursive>:
 800287a:	4770      	bx	lr

0800287c <_free_r>:
 800287c:	b538      	push	{r3, r4, r5, lr}
 800287e:	4605      	mov	r5, r0
 8002880:	2900      	cmp	r1, #0
 8002882:	d040      	beq.n	8002906 <_free_r+0x8a>
 8002884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002888:	1f0c      	subs	r4, r1, #4
 800288a:	2b00      	cmp	r3, #0
 800288c:	bfb8      	it	lt
 800288e:	18e4      	addlt	r4, r4, r3
 8002890:	f000 f8de 	bl	8002a50 <__malloc_lock>
 8002894:	4a1c      	ldr	r2, [pc, #112]	@ (8002908 <_free_r+0x8c>)
 8002896:	6813      	ldr	r3, [r2, #0]
 8002898:	b933      	cbnz	r3, 80028a8 <_free_r+0x2c>
 800289a:	6063      	str	r3, [r4, #4]
 800289c:	6014      	str	r4, [r2, #0]
 800289e:	4628      	mov	r0, r5
 80028a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028a4:	f000 b8da 	b.w	8002a5c <__malloc_unlock>
 80028a8:	42a3      	cmp	r3, r4
 80028aa:	d908      	bls.n	80028be <_free_r+0x42>
 80028ac:	6820      	ldr	r0, [r4, #0]
 80028ae:	1821      	adds	r1, r4, r0
 80028b0:	428b      	cmp	r3, r1
 80028b2:	bf01      	itttt	eq
 80028b4:	6819      	ldreq	r1, [r3, #0]
 80028b6:	685b      	ldreq	r3, [r3, #4]
 80028b8:	1809      	addeq	r1, r1, r0
 80028ba:	6021      	streq	r1, [r4, #0]
 80028bc:	e7ed      	b.n	800289a <_free_r+0x1e>
 80028be:	461a      	mov	r2, r3
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	b10b      	cbz	r3, 80028c8 <_free_r+0x4c>
 80028c4:	42a3      	cmp	r3, r4
 80028c6:	d9fa      	bls.n	80028be <_free_r+0x42>
 80028c8:	6811      	ldr	r1, [r2, #0]
 80028ca:	1850      	adds	r0, r2, r1
 80028cc:	42a0      	cmp	r0, r4
 80028ce:	d10b      	bne.n	80028e8 <_free_r+0x6c>
 80028d0:	6820      	ldr	r0, [r4, #0]
 80028d2:	4401      	add	r1, r0
 80028d4:	1850      	adds	r0, r2, r1
 80028d6:	4283      	cmp	r3, r0
 80028d8:	6011      	str	r1, [r2, #0]
 80028da:	d1e0      	bne.n	800289e <_free_r+0x22>
 80028dc:	6818      	ldr	r0, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4408      	add	r0, r1
 80028e2:	6010      	str	r0, [r2, #0]
 80028e4:	6053      	str	r3, [r2, #4]
 80028e6:	e7da      	b.n	800289e <_free_r+0x22>
 80028e8:	d902      	bls.n	80028f0 <_free_r+0x74>
 80028ea:	230c      	movs	r3, #12
 80028ec:	602b      	str	r3, [r5, #0]
 80028ee:	e7d6      	b.n	800289e <_free_r+0x22>
 80028f0:	6820      	ldr	r0, [r4, #0]
 80028f2:	1821      	adds	r1, r4, r0
 80028f4:	428b      	cmp	r3, r1
 80028f6:	bf01      	itttt	eq
 80028f8:	6819      	ldreq	r1, [r3, #0]
 80028fa:	685b      	ldreq	r3, [r3, #4]
 80028fc:	1809      	addeq	r1, r1, r0
 80028fe:	6021      	streq	r1, [r4, #0]
 8002900:	6063      	str	r3, [r4, #4]
 8002902:	6054      	str	r4, [r2, #4]
 8002904:	e7cb      	b.n	800289e <_free_r+0x22>
 8002906:	bd38      	pop	{r3, r4, r5, pc}
 8002908:	20000278 	.word	0x20000278

0800290c <sbrk_aligned>:
 800290c:	b570      	push	{r4, r5, r6, lr}
 800290e:	4e0f      	ldr	r6, [pc, #60]	@ (800294c <sbrk_aligned+0x40>)
 8002910:	460c      	mov	r4, r1
 8002912:	6831      	ldr	r1, [r6, #0]
 8002914:	4605      	mov	r5, r0
 8002916:	b911      	cbnz	r1, 800291e <sbrk_aligned+0x12>
 8002918:	f000 fba8 	bl	800306c <_sbrk_r>
 800291c:	6030      	str	r0, [r6, #0]
 800291e:	4621      	mov	r1, r4
 8002920:	4628      	mov	r0, r5
 8002922:	f000 fba3 	bl	800306c <_sbrk_r>
 8002926:	1c43      	adds	r3, r0, #1
 8002928:	d103      	bne.n	8002932 <sbrk_aligned+0x26>
 800292a:	f04f 34ff 	mov.w	r4, #4294967295
 800292e:	4620      	mov	r0, r4
 8002930:	bd70      	pop	{r4, r5, r6, pc}
 8002932:	1cc4      	adds	r4, r0, #3
 8002934:	f024 0403 	bic.w	r4, r4, #3
 8002938:	42a0      	cmp	r0, r4
 800293a:	d0f8      	beq.n	800292e <sbrk_aligned+0x22>
 800293c:	1a21      	subs	r1, r4, r0
 800293e:	4628      	mov	r0, r5
 8002940:	f000 fb94 	bl	800306c <_sbrk_r>
 8002944:	3001      	adds	r0, #1
 8002946:	d1f2      	bne.n	800292e <sbrk_aligned+0x22>
 8002948:	e7ef      	b.n	800292a <sbrk_aligned+0x1e>
 800294a:	bf00      	nop
 800294c:	20000274 	.word	0x20000274

08002950 <_malloc_r>:
 8002950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002954:	1ccd      	adds	r5, r1, #3
 8002956:	f025 0503 	bic.w	r5, r5, #3
 800295a:	3508      	adds	r5, #8
 800295c:	2d0c      	cmp	r5, #12
 800295e:	bf38      	it	cc
 8002960:	250c      	movcc	r5, #12
 8002962:	2d00      	cmp	r5, #0
 8002964:	4606      	mov	r6, r0
 8002966:	db01      	blt.n	800296c <_malloc_r+0x1c>
 8002968:	42a9      	cmp	r1, r5
 800296a:	d904      	bls.n	8002976 <_malloc_r+0x26>
 800296c:	230c      	movs	r3, #12
 800296e:	6033      	str	r3, [r6, #0]
 8002970:	2000      	movs	r0, #0
 8002972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002976:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a4c <_malloc_r+0xfc>
 800297a:	f000 f869 	bl	8002a50 <__malloc_lock>
 800297e:	f8d8 3000 	ldr.w	r3, [r8]
 8002982:	461c      	mov	r4, r3
 8002984:	bb44      	cbnz	r4, 80029d8 <_malloc_r+0x88>
 8002986:	4629      	mov	r1, r5
 8002988:	4630      	mov	r0, r6
 800298a:	f7ff ffbf 	bl	800290c <sbrk_aligned>
 800298e:	1c43      	adds	r3, r0, #1
 8002990:	4604      	mov	r4, r0
 8002992:	d158      	bne.n	8002a46 <_malloc_r+0xf6>
 8002994:	f8d8 4000 	ldr.w	r4, [r8]
 8002998:	4627      	mov	r7, r4
 800299a:	2f00      	cmp	r7, #0
 800299c:	d143      	bne.n	8002a26 <_malloc_r+0xd6>
 800299e:	2c00      	cmp	r4, #0
 80029a0:	d04b      	beq.n	8002a3a <_malloc_r+0xea>
 80029a2:	6823      	ldr	r3, [r4, #0]
 80029a4:	4639      	mov	r1, r7
 80029a6:	4630      	mov	r0, r6
 80029a8:	eb04 0903 	add.w	r9, r4, r3
 80029ac:	f000 fb5e 	bl	800306c <_sbrk_r>
 80029b0:	4581      	cmp	r9, r0
 80029b2:	d142      	bne.n	8002a3a <_malloc_r+0xea>
 80029b4:	6821      	ldr	r1, [r4, #0]
 80029b6:	4630      	mov	r0, r6
 80029b8:	1a6d      	subs	r5, r5, r1
 80029ba:	4629      	mov	r1, r5
 80029bc:	f7ff ffa6 	bl	800290c <sbrk_aligned>
 80029c0:	3001      	adds	r0, #1
 80029c2:	d03a      	beq.n	8002a3a <_malloc_r+0xea>
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	442b      	add	r3, r5
 80029c8:	6023      	str	r3, [r4, #0]
 80029ca:	f8d8 3000 	ldr.w	r3, [r8]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	bb62      	cbnz	r2, 8002a2c <_malloc_r+0xdc>
 80029d2:	f8c8 7000 	str.w	r7, [r8]
 80029d6:	e00f      	b.n	80029f8 <_malloc_r+0xa8>
 80029d8:	6822      	ldr	r2, [r4, #0]
 80029da:	1b52      	subs	r2, r2, r5
 80029dc:	d420      	bmi.n	8002a20 <_malloc_r+0xd0>
 80029de:	2a0b      	cmp	r2, #11
 80029e0:	d917      	bls.n	8002a12 <_malloc_r+0xc2>
 80029e2:	1961      	adds	r1, r4, r5
 80029e4:	42a3      	cmp	r3, r4
 80029e6:	6025      	str	r5, [r4, #0]
 80029e8:	bf18      	it	ne
 80029ea:	6059      	strne	r1, [r3, #4]
 80029ec:	6863      	ldr	r3, [r4, #4]
 80029ee:	bf08      	it	eq
 80029f0:	f8c8 1000 	streq.w	r1, [r8]
 80029f4:	5162      	str	r2, [r4, r5]
 80029f6:	604b      	str	r3, [r1, #4]
 80029f8:	4630      	mov	r0, r6
 80029fa:	f000 f82f 	bl	8002a5c <__malloc_unlock>
 80029fe:	f104 000b 	add.w	r0, r4, #11
 8002a02:	1d23      	adds	r3, r4, #4
 8002a04:	f020 0007 	bic.w	r0, r0, #7
 8002a08:	1ac2      	subs	r2, r0, r3
 8002a0a:	bf1c      	itt	ne
 8002a0c:	1a1b      	subne	r3, r3, r0
 8002a0e:	50a3      	strne	r3, [r4, r2]
 8002a10:	e7af      	b.n	8002972 <_malloc_r+0x22>
 8002a12:	6862      	ldr	r2, [r4, #4]
 8002a14:	42a3      	cmp	r3, r4
 8002a16:	bf0c      	ite	eq
 8002a18:	f8c8 2000 	streq.w	r2, [r8]
 8002a1c:	605a      	strne	r2, [r3, #4]
 8002a1e:	e7eb      	b.n	80029f8 <_malloc_r+0xa8>
 8002a20:	4623      	mov	r3, r4
 8002a22:	6864      	ldr	r4, [r4, #4]
 8002a24:	e7ae      	b.n	8002984 <_malloc_r+0x34>
 8002a26:	463c      	mov	r4, r7
 8002a28:	687f      	ldr	r7, [r7, #4]
 8002a2a:	e7b6      	b.n	800299a <_malloc_r+0x4a>
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	42a3      	cmp	r3, r4
 8002a32:	d1fb      	bne.n	8002a2c <_malloc_r+0xdc>
 8002a34:	2300      	movs	r3, #0
 8002a36:	6053      	str	r3, [r2, #4]
 8002a38:	e7de      	b.n	80029f8 <_malloc_r+0xa8>
 8002a3a:	230c      	movs	r3, #12
 8002a3c:	4630      	mov	r0, r6
 8002a3e:	6033      	str	r3, [r6, #0]
 8002a40:	f000 f80c 	bl	8002a5c <__malloc_unlock>
 8002a44:	e794      	b.n	8002970 <_malloc_r+0x20>
 8002a46:	6005      	str	r5, [r0, #0]
 8002a48:	e7d6      	b.n	80029f8 <_malloc_r+0xa8>
 8002a4a:	bf00      	nop
 8002a4c:	20000278 	.word	0x20000278

08002a50 <__malloc_lock>:
 8002a50:	4801      	ldr	r0, [pc, #4]	@ (8002a58 <__malloc_lock+0x8>)
 8002a52:	f7ff bf11 	b.w	8002878 <__retarget_lock_acquire_recursive>
 8002a56:	bf00      	nop
 8002a58:	20000270 	.word	0x20000270

08002a5c <__malloc_unlock>:
 8002a5c:	4801      	ldr	r0, [pc, #4]	@ (8002a64 <__malloc_unlock+0x8>)
 8002a5e:	f7ff bf0c 	b.w	800287a <__retarget_lock_release_recursive>
 8002a62:	bf00      	nop
 8002a64:	20000270 	.word	0x20000270

08002a68 <__ssputs_r>:
 8002a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a6c:	461f      	mov	r7, r3
 8002a6e:	688e      	ldr	r6, [r1, #8]
 8002a70:	4682      	mov	sl, r0
 8002a72:	42be      	cmp	r6, r7
 8002a74:	460c      	mov	r4, r1
 8002a76:	4690      	mov	r8, r2
 8002a78:	680b      	ldr	r3, [r1, #0]
 8002a7a:	d82d      	bhi.n	8002ad8 <__ssputs_r+0x70>
 8002a7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002a84:	d026      	beq.n	8002ad4 <__ssputs_r+0x6c>
 8002a86:	6965      	ldr	r5, [r4, #20]
 8002a88:	6909      	ldr	r1, [r1, #16]
 8002a8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a8e:	eba3 0901 	sub.w	r9, r3, r1
 8002a92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a96:	1c7b      	adds	r3, r7, #1
 8002a98:	444b      	add	r3, r9
 8002a9a:	106d      	asrs	r5, r5, #1
 8002a9c:	429d      	cmp	r5, r3
 8002a9e:	bf38      	it	cc
 8002aa0:	461d      	movcc	r5, r3
 8002aa2:	0553      	lsls	r3, r2, #21
 8002aa4:	d527      	bpl.n	8002af6 <__ssputs_r+0x8e>
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	f7ff ff52 	bl	8002950 <_malloc_r>
 8002aac:	4606      	mov	r6, r0
 8002aae:	b360      	cbz	r0, 8002b0a <__ssputs_r+0xa2>
 8002ab0:	464a      	mov	r2, r9
 8002ab2:	6921      	ldr	r1, [r4, #16]
 8002ab4:	f000 faf8 	bl	80030a8 <memcpy>
 8002ab8:	89a3      	ldrh	r3, [r4, #12]
 8002aba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ac2:	81a3      	strh	r3, [r4, #12]
 8002ac4:	6126      	str	r6, [r4, #16]
 8002ac6:	444e      	add	r6, r9
 8002ac8:	6026      	str	r6, [r4, #0]
 8002aca:	463e      	mov	r6, r7
 8002acc:	6165      	str	r5, [r4, #20]
 8002ace:	eba5 0509 	sub.w	r5, r5, r9
 8002ad2:	60a5      	str	r5, [r4, #8]
 8002ad4:	42be      	cmp	r6, r7
 8002ad6:	d900      	bls.n	8002ada <__ssputs_r+0x72>
 8002ad8:	463e      	mov	r6, r7
 8002ada:	4632      	mov	r2, r6
 8002adc:	4641      	mov	r1, r8
 8002ade:	6820      	ldr	r0, [r4, #0]
 8002ae0:	f000 faaa 	bl	8003038 <memmove>
 8002ae4:	2000      	movs	r0, #0
 8002ae6:	68a3      	ldr	r3, [r4, #8]
 8002ae8:	1b9b      	subs	r3, r3, r6
 8002aea:	60a3      	str	r3, [r4, #8]
 8002aec:	6823      	ldr	r3, [r4, #0]
 8002aee:	4433      	add	r3, r6
 8002af0:	6023      	str	r3, [r4, #0]
 8002af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002af6:	462a      	mov	r2, r5
 8002af8:	f000 fae4 	bl	80030c4 <_realloc_r>
 8002afc:	4606      	mov	r6, r0
 8002afe:	2800      	cmp	r0, #0
 8002b00:	d1e0      	bne.n	8002ac4 <__ssputs_r+0x5c>
 8002b02:	4650      	mov	r0, sl
 8002b04:	6921      	ldr	r1, [r4, #16]
 8002b06:	f7ff feb9 	bl	800287c <_free_r>
 8002b0a:	230c      	movs	r3, #12
 8002b0c:	f8ca 3000 	str.w	r3, [sl]
 8002b10:	89a3      	ldrh	r3, [r4, #12]
 8002b12:	f04f 30ff 	mov.w	r0, #4294967295
 8002b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b1a:	81a3      	strh	r3, [r4, #12]
 8002b1c:	e7e9      	b.n	8002af2 <__ssputs_r+0x8a>
	...

08002b20 <_svfiprintf_r>:
 8002b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b24:	4698      	mov	r8, r3
 8002b26:	898b      	ldrh	r3, [r1, #12]
 8002b28:	4607      	mov	r7, r0
 8002b2a:	061b      	lsls	r3, r3, #24
 8002b2c:	460d      	mov	r5, r1
 8002b2e:	4614      	mov	r4, r2
 8002b30:	b09d      	sub	sp, #116	@ 0x74
 8002b32:	d510      	bpl.n	8002b56 <_svfiprintf_r+0x36>
 8002b34:	690b      	ldr	r3, [r1, #16]
 8002b36:	b973      	cbnz	r3, 8002b56 <_svfiprintf_r+0x36>
 8002b38:	2140      	movs	r1, #64	@ 0x40
 8002b3a:	f7ff ff09 	bl	8002950 <_malloc_r>
 8002b3e:	6028      	str	r0, [r5, #0]
 8002b40:	6128      	str	r0, [r5, #16]
 8002b42:	b930      	cbnz	r0, 8002b52 <_svfiprintf_r+0x32>
 8002b44:	230c      	movs	r3, #12
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	f04f 30ff 	mov.w	r0, #4294967295
 8002b4c:	b01d      	add	sp, #116	@ 0x74
 8002b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b52:	2340      	movs	r3, #64	@ 0x40
 8002b54:	616b      	str	r3, [r5, #20]
 8002b56:	2300      	movs	r3, #0
 8002b58:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002b60:	2330      	movs	r3, #48	@ 0x30
 8002b62:	f04f 0901 	mov.w	r9, #1
 8002b66:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b6a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002d04 <_svfiprintf_r+0x1e4>
 8002b6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002b72:	4623      	mov	r3, r4
 8002b74:	469a      	mov	sl, r3
 8002b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b7a:	b10a      	cbz	r2, 8002b80 <_svfiprintf_r+0x60>
 8002b7c:	2a25      	cmp	r2, #37	@ 0x25
 8002b7e:	d1f9      	bne.n	8002b74 <_svfiprintf_r+0x54>
 8002b80:	ebba 0b04 	subs.w	fp, sl, r4
 8002b84:	d00b      	beq.n	8002b9e <_svfiprintf_r+0x7e>
 8002b86:	465b      	mov	r3, fp
 8002b88:	4622      	mov	r2, r4
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	4638      	mov	r0, r7
 8002b8e:	f7ff ff6b 	bl	8002a68 <__ssputs_r>
 8002b92:	3001      	adds	r0, #1
 8002b94:	f000 80a7 	beq.w	8002ce6 <_svfiprintf_r+0x1c6>
 8002b98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002b9a:	445a      	add	r2, fp
 8002b9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8002b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 809f 	beq.w	8002ce6 <_svfiprintf_r+0x1c6>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f04f 32ff 	mov.w	r2, #4294967295
 8002bae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bb2:	f10a 0a01 	add.w	sl, sl, #1
 8002bb6:	9304      	str	r3, [sp, #16]
 8002bb8:	9307      	str	r3, [sp, #28]
 8002bba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002bbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8002bc0:	4654      	mov	r4, sl
 8002bc2:	2205      	movs	r2, #5
 8002bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002bc8:	484e      	ldr	r0, [pc, #312]	@ (8002d04 <_svfiprintf_r+0x1e4>)
 8002bca:	f000 fa5f 	bl	800308c <memchr>
 8002bce:	9a04      	ldr	r2, [sp, #16]
 8002bd0:	b9d8      	cbnz	r0, 8002c0a <_svfiprintf_r+0xea>
 8002bd2:	06d0      	lsls	r0, r2, #27
 8002bd4:	bf44      	itt	mi
 8002bd6:	2320      	movmi	r3, #32
 8002bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002bdc:	0711      	lsls	r1, r2, #28
 8002bde:	bf44      	itt	mi
 8002be0:	232b      	movmi	r3, #43	@ 0x2b
 8002be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002be6:	f89a 3000 	ldrb.w	r3, [sl]
 8002bea:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bec:	d015      	beq.n	8002c1a <_svfiprintf_r+0xfa>
 8002bee:	4654      	mov	r4, sl
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f04f 0c0a 	mov.w	ip, #10
 8002bf6:	9a07      	ldr	r2, [sp, #28]
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002bfe:	3b30      	subs	r3, #48	@ 0x30
 8002c00:	2b09      	cmp	r3, #9
 8002c02:	d94b      	bls.n	8002c9c <_svfiprintf_r+0x17c>
 8002c04:	b1b0      	cbz	r0, 8002c34 <_svfiprintf_r+0x114>
 8002c06:	9207      	str	r2, [sp, #28]
 8002c08:	e014      	b.n	8002c34 <_svfiprintf_r+0x114>
 8002c0a:	eba0 0308 	sub.w	r3, r0, r8
 8002c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8002c12:	4313      	orrs	r3, r2
 8002c14:	46a2      	mov	sl, r4
 8002c16:	9304      	str	r3, [sp, #16]
 8002c18:	e7d2      	b.n	8002bc0 <_svfiprintf_r+0xa0>
 8002c1a:	9b03      	ldr	r3, [sp, #12]
 8002c1c:	1d19      	adds	r1, r3, #4
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	9103      	str	r1, [sp, #12]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bfbb      	ittet	lt
 8002c26:	425b      	neglt	r3, r3
 8002c28:	f042 0202 	orrlt.w	r2, r2, #2
 8002c2c:	9307      	strge	r3, [sp, #28]
 8002c2e:	9307      	strlt	r3, [sp, #28]
 8002c30:	bfb8      	it	lt
 8002c32:	9204      	strlt	r2, [sp, #16]
 8002c34:	7823      	ldrb	r3, [r4, #0]
 8002c36:	2b2e      	cmp	r3, #46	@ 0x2e
 8002c38:	d10a      	bne.n	8002c50 <_svfiprintf_r+0x130>
 8002c3a:	7863      	ldrb	r3, [r4, #1]
 8002c3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c3e:	d132      	bne.n	8002ca6 <_svfiprintf_r+0x186>
 8002c40:	9b03      	ldr	r3, [sp, #12]
 8002c42:	3402      	adds	r4, #2
 8002c44:	1d1a      	adds	r2, r3, #4
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	9203      	str	r2, [sp, #12]
 8002c4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002c4e:	9305      	str	r3, [sp, #20]
 8002c50:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002d08 <_svfiprintf_r+0x1e8>
 8002c54:	2203      	movs	r2, #3
 8002c56:	4650      	mov	r0, sl
 8002c58:	7821      	ldrb	r1, [r4, #0]
 8002c5a:	f000 fa17 	bl	800308c <memchr>
 8002c5e:	b138      	cbz	r0, 8002c70 <_svfiprintf_r+0x150>
 8002c60:	2240      	movs	r2, #64	@ 0x40
 8002c62:	9b04      	ldr	r3, [sp, #16]
 8002c64:	eba0 000a 	sub.w	r0, r0, sl
 8002c68:	4082      	lsls	r2, r0
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	3401      	adds	r4, #1
 8002c6e:	9304      	str	r3, [sp, #16]
 8002c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c74:	2206      	movs	r2, #6
 8002c76:	4825      	ldr	r0, [pc, #148]	@ (8002d0c <_svfiprintf_r+0x1ec>)
 8002c78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002c7c:	f000 fa06 	bl	800308c <memchr>
 8002c80:	2800      	cmp	r0, #0
 8002c82:	d036      	beq.n	8002cf2 <_svfiprintf_r+0x1d2>
 8002c84:	4b22      	ldr	r3, [pc, #136]	@ (8002d10 <_svfiprintf_r+0x1f0>)
 8002c86:	bb1b      	cbnz	r3, 8002cd0 <_svfiprintf_r+0x1b0>
 8002c88:	9b03      	ldr	r3, [sp, #12]
 8002c8a:	3307      	adds	r3, #7
 8002c8c:	f023 0307 	bic.w	r3, r3, #7
 8002c90:	3308      	adds	r3, #8
 8002c92:	9303      	str	r3, [sp, #12]
 8002c94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c96:	4433      	add	r3, r6
 8002c98:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c9a:	e76a      	b.n	8002b72 <_svfiprintf_r+0x52>
 8002c9c:	460c      	mov	r4, r1
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ca4:	e7a8      	b.n	8002bf8 <_svfiprintf_r+0xd8>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f04f 0c0a 	mov.w	ip, #10
 8002cac:	4619      	mov	r1, r3
 8002cae:	3401      	adds	r4, #1
 8002cb0:	9305      	str	r3, [sp, #20]
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002cb8:	3a30      	subs	r2, #48	@ 0x30
 8002cba:	2a09      	cmp	r2, #9
 8002cbc:	d903      	bls.n	8002cc6 <_svfiprintf_r+0x1a6>
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0c6      	beq.n	8002c50 <_svfiprintf_r+0x130>
 8002cc2:	9105      	str	r1, [sp, #20]
 8002cc4:	e7c4      	b.n	8002c50 <_svfiprintf_r+0x130>
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	2301      	movs	r3, #1
 8002cca:	fb0c 2101 	mla	r1, ip, r1, r2
 8002cce:	e7f0      	b.n	8002cb2 <_svfiprintf_r+0x192>
 8002cd0:	ab03      	add	r3, sp, #12
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	462a      	mov	r2, r5
 8002cd6:	4638      	mov	r0, r7
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <_svfiprintf_r+0x1f4>)
 8002cda:	a904      	add	r1, sp, #16
 8002cdc:	f3af 8000 	nop.w
 8002ce0:	1c42      	adds	r2, r0, #1
 8002ce2:	4606      	mov	r6, r0
 8002ce4:	d1d6      	bne.n	8002c94 <_svfiprintf_r+0x174>
 8002ce6:	89ab      	ldrh	r3, [r5, #12]
 8002ce8:	065b      	lsls	r3, r3, #25
 8002cea:	f53f af2d 	bmi.w	8002b48 <_svfiprintf_r+0x28>
 8002cee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002cf0:	e72c      	b.n	8002b4c <_svfiprintf_r+0x2c>
 8002cf2:	ab03      	add	r3, sp, #12
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	462a      	mov	r2, r5
 8002cf8:	4638      	mov	r0, r7
 8002cfa:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <_svfiprintf_r+0x1f4>)
 8002cfc:	a904      	add	r1, sp, #16
 8002cfe:	f000 f87d 	bl	8002dfc <_printf_i>
 8002d02:	e7ed      	b.n	8002ce0 <_svfiprintf_r+0x1c0>
 8002d04:	08003196 	.word	0x08003196
 8002d08:	0800319c 	.word	0x0800319c
 8002d0c:	080031a0 	.word	0x080031a0
 8002d10:	00000000 	.word	0x00000000
 8002d14:	08002a69 	.word	0x08002a69

08002d18 <_printf_common>:
 8002d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d1c:	4616      	mov	r6, r2
 8002d1e:	4698      	mov	r8, r3
 8002d20:	688a      	ldr	r2, [r1, #8]
 8002d22:	690b      	ldr	r3, [r1, #16]
 8002d24:	4607      	mov	r7, r0
 8002d26:	4293      	cmp	r3, r2
 8002d28:	bfb8      	it	lt
 8002d2a:	4613      	movlt	r3, r2
 8002d2c:	6033      	str	r3, [r6, #0]
 8002d2e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002d32:	460c      	mov	r4, r1
 8002d34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002d38:	b10a      	cbz	r2, 8002d3e <_printf_common+0x26>
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	6033      	str	r3, [r6, #0]
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	0699      	lsls	r1, r3, #26
 8002d42:	bf42      	ittt	mi
 8002d44:	6833      	ldrmi	r3, [r6, #0]
 8002d46:	3302      	addmi	r3, #2
 8002d48:	6033      	strmi	r3, [r6, #0]
 8002d4a:	6825      	ldr	r5, [r4, #0]
 8002d4c:	f015 0506 	ands.w	r5, r5, #6
 8002d50:	d106      	bne.n	8002d60 <_printf_common+0x48>
 8002d52:	f104 0a19 	add.w	sl, r4, #25
 8002d56:	68e3      	ldr	r3, [r4, #12]
 8002d58:	6832      	ldr	r2, [r6, #0]
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	42ab      	cmp	r3, r5
 8002d5e:	dc2b      	bgt.n	8002db8 <_printf_common+0xa0>
 8002d60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002d64:	6822      	ldr	r2, [r4, #0]
 8002d66:	3b00      	subs	r3, #0
 8002d68:	bf18      	it	ne
 8002d6a:	2301      	movne	r3, #1
 8002d6c:	0692      	lsls	r2, r2, #26
 8002d6e:	d430      	bmi.n	8002dd2 <_printf_common+0xba>
 8002d70:	4641      	mov	r1, r8
 8002d72:	4638      	mov	r0, r7
 8002d74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002d78:	47c8      	blx	r9
 8002d7a:	3001      	adds	r0, #1
 8002d7c:	d023      	beq.n	8002dc6 <_printf_common+0xae>
 8002d7e:	6823      	ldr	r3, [r4, #0]
 8002d80:	6922      	ldr	r2, [r4, #16]
 8002d82:	f003 0306 	and.w	r3, r3, #6
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	bf14      	ite	ne
 8002d8a:	2500      	movne	r5, #0
 8002d8c:	6833      	ldreq	r3, [r6, #0]
 8002d8e:	f04f 0600 	mov.w	r6, #0
 8002d92:	bf08      	it	eq
 8002d94:	68e5      	ldreq	r5, [r4, #12]
 8002d96:	f104 041a 	add.w	r4, r4, #26
 8002d9a:	bf08      	it	eq
 8002d9c:	1aed      	subeq	r5, r5, r3
 8002d9e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002da2:	bf08      	it	eq
 8002da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002da8:	4293      	cmp	r3, r2
 8002daa:	bfc4      	itt	gt
 8002dac:	1a9b      	subgt	r3, r3, r2
 8002dae:	18ed      	addgt	r5, r5, r3
 8002db0:	42b5      	cmp	r5, r6
 8002db2:	d11a      	bne.n	8002dea <_printf_common+0xd2>
 8002db4:	2000      	movs	r0, #0
 8002db6:	e008      	b.n	8002dca <_printf_common+0xb2>
 8002db8:	2301      	movs	r3, #1
 8002dba:	4652      	mov	r2, sl
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	4638      	mov	r0, r7
 8002dc0:	47c8      	blx	r9
 8002dc2:	3001      	adds	r0, #1
 8002dc4:	d103      	bne.n	8002dce <_printf_common+0xb6>
 8002dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dce:	3501      	adds	r5, #1
 8002dd0:	e7c1      	b.n	8002d56 <_printf_common+0x3e>
 8002dd2:	2030      	movs	r0, #48	@ 0x30
 8002dd4:	18e1      	adds	r1, r4, r3
 8002dd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002de0:	4422      	add	r2, r4
 8002de2:	3302      	adds	r3, #2
 8002de4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002de8:	e7c2      	b.n	8002d70 <_printf_common+0x58>
 8002dea:	2301      	movs	r3, #1
 8002dec:	4622      	mov	r2, r4
 8002dee:	4641      	mov	r1, r8
 8002df0:	4638      	mov	r0, r7
 8002df2:	47c8      	blx	r9
 8002df4:	3001      	adds	r0, #1
 8002df6:	d0e6      	beq.n	8002dc6 <_printf_common+0xae>
 8002df8:	3601      	adds	r6, #1
 8002dfa:	e7d9      	b.n	8002db0 <_printf_common+0x98>

08002dfc <_printf_i>:
 8002dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e00:	7e0f      	ldrb	r7, [r1, #24]
 8002e02:	4691      	mov	r9, r2
 8002e04:	2f78      	cmp	r7, #120	@ 0x78
 8002e06:	4680      	mov	r8, r0
 8002e08:	460c      	mov	r4, r1
 8002e0a:	469a      	mov	sl, r3
 8002e0c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002e0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002e12:	d807      	bhi.n	8002e24 <_printf_i+0x28>
 8002e14:	2f62      	cmp	r7, #98	@ 0x62
 8002e16:	d80a      	bhi.n	8002e2e <_printf_i+0x32>
 8002e18:	2f00      	cmp	r7, #0
 8002e1a:	f000 80d1 	beq.w	8002fc0 <_printf_i+0x1c4>
 8002e1e:	2f58      	cmp	r7, #88	@ 0x58
 8002e20:	f000 80b8 	beq.w	8002f94 <_printf_i+0x198>
 8002e24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002e28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002e2c:	e03a      	b.n	8002ea4 <_printf_i+0xa8>
 8002e2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002e32:	2b15      	cmp	r3, #21
 8002e34:	d8f6      	bhi.n	8002e24 <_printf_i+0x28>
 8002e36:	a101      	add	r1, pc, #4	@ (adr r1, 8002e3c <_printf_i+0x40>)
 8002e38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e3c:	08002e95 	.word	0x08002e95
 8002e40:	08002ea9 	.word	0x08002ea9
 8002e44:	08002e25 	.word	0x08002e25
 8002e48:	08002e25 	.word	0x08002e25
 8002e4c:	08002e25 	.word	0x08002e25
 8002e50:	08002e25 	.word	0x08002e25
 8002e54:	08002ea9 	.word	0x08002ea9
 8002e58:	08002e25 	.word	0x08002e25
 8002e5c:	08002e25 	.word	0x08002e25
 8002e60:	08002e25 	.word	0x08002e25
 8002e64:	08002e25 	.word	0x08002e25
 8002e68:	08002fa7 	.word	0x08002fa7
 8002e6c:	08002ed3 	.word	0x08002ed3
 8002e70:	08002f61 	.word	0x08002f61
 8002e74:	08002e25 	.word	0x08002e25
 8002e78:	08002e25 	.word	0x08002e25
 8002e7c:	08002fc9 	.word	0x08002fc9
 8002e80:	08002e25 	.word	0x08002e25
 8002e84:	08002ed3 	.word	0x08002ed3
 8002e88:	08002e25 	.word	0x08002e25
 8002e8c:	08002e25 	.word	0x08002e25
 8002e90:	08002f69 	.word	0x08002f69
 8002e94:	6833      	ldr	r3, [r6, #0]
 8002e96:	1d1a      	adds	r2, r3, #4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6032      	str	r2, [r6, #0]
 8002e9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ea0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e09c      	b.n	8002fe2 <_printf_i+0x1e6>
 8002ea8:	6833      	ldr	r3, [r6, #0]
 8002eaa:	6820      	ldr	r0, [r4, #0]
 8002eac:	1d19      	adds	r1, r3, #4
 8002eae:	6031      	str	r1, [r6, #0]
 8002eb0:	0606      	lsls	r6, r0, #24
 8002eb2:	d501      	bpl.n	8002eb8 <_printf_i+0xbc>
 8002eb4:	681d      	ldr	r5, [r3, #0]
 8002eb6:	e003      	b.n	8002ec0 <_printf_i+0xc4>
 8002eb8:	0645      	lsls	r5, r0, #25
 8002eba:	d5fb      	bpl.n	8002eb4 <_printf_i+0xb8>
 8002ebc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002ec0:	2d00      	cmp	r5, #0
 8002ec2:	da03      	bge.n	8002ecc <_printf_i+0xd0>
 8002ec4:	232d      	movs	r3, #45	@ 0x2d
 8002ec6:	426d      	negs	r5, r5
 8002ec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ecc:	230a      	movs	r3, #10
 8002ece:	4858      	ldr	r0, [pc, #352]	@ (8003030 <_printf_i+0x234>)
 8002ed0:	e011      	b.n	8002ef6 <_printf_i+0xfa>
 8002ed2:	6821      	ldr	r1, [r4, #0]
 8002ed4:	6833      	ldr	r3, [r6, #0]
 8002ed6:	0608      	lsls	r0, r1, #24
 8002ed8:	f853 5b04 	ldr.w	r5, [r3], #4
 8002edc:	d402      	bmi.n	8002ee4 <_printf_i+0xe8>
 8002ede:	0649      	lsls	r1, r1, #25
 8002ee0:	bf48      	it	mi
 8002ee2:	b2ad      	uxthmi	r5, r5
 8002ee4:	2f6f      	cmp	r7, #111	@ 0x6f
 8002ee6:	6033      	str	r3, [r6, #0]
 8002ee8:	bf14      	ite	ne
 8002eea:	230a      	movne	r3, #10
 8002eec:	2308      	moveq	r3, #8
 8002eee:	4850      	ldr	r0, [pc, #320]	@ (8003030 <_printf_i+0x234>)
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002ef6:	6866      	ldr	r6, [r4, #4]
 8002ef8:	2e00      	cmp	r6, #0
 8002efa:	60a6      	str	r6, [r4, #8]
 8002efc:	db05      	blt.n	8002f0a <_printf_i+0x10e>
 8002efe:	6821      	ldr	r1, [r4, #0]
 8002f00:	432e      	orrs	r6, r5
 8002f02:	f021 0104 	bic.w	r1, r1, #4
 8002f06:	6021      	str	r1, [r4, #0]
 8002f08:	d04b      	beq.n	8002fa2 <_printf_i+0x1a6>
 8002f0a:	4616      	mov	r6, r2
 8002f0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f10:	fb03 5711 	mls	r7, r3, r1, r5
 8002f14:	5dc7      	ldrb	r7, [r0, r7]
 8002f16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f1a:	462f      	mov	r7, r5
 8002f1c:	42bb      	cmp	r3, r7
 8002f1e:	460d      	mov	r5, r1
 8002f20:	d9f4      	bls.n	8002f0c <_printf_i+0x110>
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d10b      	bne.n	8002f3e <_printf_i+0x142>
 8002f26:	6823      	ldr	r3, [r4, #0]
 8002f28:	07df      	lsls	r7, r3, #31
 8002f2a:	d508      	bpl.n	8002f3e <_printf_i+0x142>
 8002f2c:	6923      	ldr	r3, [r4, #16]
 8002f2e:	6861      	ldr	r1, [r4, #4]
 8002f30:	4299      	cmp	r1, r3
 8002f32:	bfde      	ittt	le
 8002f34:	2330      	movle	r3, #48	@ 0x30
 8002f36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f3a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002f3e:	1b92      	subs	r2, r2, r6
 8002f40:	6122      	str	r2, [r4, #16]
 8002f42:	464b      	mov	r3, r9
 8002f44:	4621      	mov	r1, r4
 8002f46:	4640      	mov	r0, r8
 8002f48:	f8cd a000 	str.w	sl, [sp]
 8002f4c:	aa03      	add	r2, sp, #12
 8002f4e:	f7ff fee3 	bl	8002d18 <_printf_common>
 8002f52:	3001      	adds	r0, #1
 8002f54:	d14a      	bne.n	8002fec <_printf_i+0x1f0>
 8002f56:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5a:	b004      	add	sp, #16
 8002f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f60:	6823      	ldr	r3, [r4, #0]
 8002f62:	f043 0320 	orr.w	r3, r3, #32
 8002f66:	6023      	str	r3, [r4, #0]
 8002f68:	2778      	movs	r7, #120	@ 0x78
 8002f6a:	4832      	ldr	r0, [pc, #200]	@ (8003034 <_printf_i+0x238>)
 8002f6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	6831      	ldr	r1, [r6, #0]
 8002f74:	061f      	lsls	r7, r3, #24
 8002f76:	f851 5b04 	ldr.w	r5, [r1], #4
 8002f7a:	d402      	bmi.n	8002f82 <_printf_i+0x186>
 8002f7c:	065f      	lsls	r7, r3, #25
 8002f7e:	bf48      	it	mi
 8002f80:	b2ad      	uxthmi	r5, r5
 8002f82:	6031      	str	r1, [r6, #0]
 8002f84:	07d9      	lsls	r1, r3, #31
 8002f86:	bf44      	itt	mi
 8002f88:	f043 0320 	orrmi.w	r3, r3, #32
 8002f8c:	6023      	strmi	r3, [r4, #0]
 8002f8e:	b11d      	cbz	r5, 8002f98 <_printf_i+0x19c>
 8002f90:	2310      	movs	r3, #16
 8002f92:	e7ad      	b.n	8002ef0 <_printf_i+0xf4>
 8002f94:	4826      	ldr	r0, [pc, #152]	@ (8003030 <_printf_i+0x234>)
 8002f96:	e7e9      	b.n	8002f6c <_printf_i+0x170>
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	f023 0320 	bic.w	r3, r3, #32
 8002f9e:	6023      	str	r3, [r4, #0]
 8002fa0:	e7f6      	b.n	8002f90 <_printf_i+0x194>
 8002fa2:	4616      	mov	r6, r2
 8002fa4:	e7bd      	b.n	8002f22 <_printf_i+0x126>
 8002fa6:	6833      	ldr	r3, [r6, #0]
 8002fa8:	6825      	ldr	r5, [r4, #0]
 8002faa:	1d18      	adds	r0, r3, #4
 8002fac:	6961      	ldr	r1, [r4, #20]
 8002fae:	6030      	str	r0, [r6, #0]
 8002fb0:	062e      	lsls	r6, r5, #24
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	d501      	bpl.n	8002fba <_printf_i+0x1be>
 8002fb6:	6019      	str	r1, [r3, #0]
 8002fb8:	e002      	b.n	8002fc0 <_printf_i+0x1c4>
 8002fba:	0668      	lsls	r0, r5, #25
 8002fbc:	d5fb      	bpl.n	8002fb6 <_printf_i+0x1ba>
 8002fbe:	8019      	strh	r1, [r3, #0]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	4616      	mov	r6, r2
 8002fc4:	6123      	str	r3, [r4, #16]
 8002fc6:	e7bc      	b.n	8002f42 <_printf_i+0x146>
 8002fc8:	6833      	ldr	r3, [r6, #0]
 8002fca:	2100      	movs	r1, #0
 8002fcc:	1d1a      	adds	r2, r3, #4
 8002fce:	6032      	str	r2, [r6, #0]
 8002fd0:	681e      	ldr	r6, [r3, #0]
 8002fd2:	6862      	ldr	r2, [r4, #4]
 8002fd4:	4630      	mov	r0, r6
 8002fd6:	f000 f859 	bl	800308c <memchr>
 8002fda:	b108      	cbz	r0, 8002fe0 <_printf_i+0x1e4>
 8002fdc:	1b80      	subs	r0, r0, r6
 8002fde:	6060      	str	r0, [r4, #4]
 8002fe0:	6863      	ldr	r3, [r4, #4]
 8002fe2:	6123      	str	r3, [r4, #16]
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002fea:	e7aa      	b.n	8002f42 <_printf_i+0x146>
 8002fec:	4632      	mov	r2, r6
 8002fee:	4649      	mov	r1, r9
 8002ff0:	4640      	mov	r0, r8
 8002ff2:	6923      	ldr	r3, [r4, #16]
 8002ff4:	47d0      	blx	sl
 8002ff6:	3001      	adds	r0, #1
 8002ff8:	d0ad      	beq.n	8002f56 <_printf_i+0x15a>
 8002ffa:	6823      	ldr	r3, [r4, #0]
 8002ffc:	079b      	lsls	r3, r3, #30
 8002ffe:	d413      	bmi.n	8003028 <_printf_i+0x22c>
 8003000:	68e0      	ldr	r0, [r4, #12]
 8003002:	9b03      	ldr	r3, [sp, #12]
 8003004:	4298      	cmp	r0, r3
 8003006:	bfb8      	it	lt
 8003008:	4618      	movlt	r0, r3
 800300a:	e7a6      	b.n	8002f5a <_printf_i+0x15e>
 800300c:	2301      	movs	r3, #1
 800300e:	4632      	mov	r2, r6
 8003010:	4649      	mov	r1, r9
 8003012:	4640      	mov	r0, r8
 8003014:	47d0      	blx	sl
 8003016:	3001      	adds	r0, #1
 8003018:	d09d      	beq.n	8002f56 <_printf_i+0x15a>
 800301a:	3501      	adds	r5, #1
 800301c:	68e3      	ldr	r3, [r4, #12]
 800301e:	9903      	ldr	r1, [sp, #12]
 8003020:	1a5b      	subs	r3, r3, r1
 8003022:	42ab      	cmp	r3, r5
 8003024:	dcf2      	bgt.n	800300c <_printf_i+0x210>
 8003026:	e7eb      	b.n	8003000 <_printf_i+0x204>
 8003028:	2500      	movs	r5, #0
 800302a:	f104 0619 	add.w	r6, r4, #25
 800302e:	e7f5      	b.n	800301c <_printf_i+0x220>
 8003030:	080031a7 	.word	0x080031a7
 8003034:	080031b8 	.word	0x080031b8

08003038 <memmove>:
 8003038:	4288      	cmp	r0, r1
 800303a:	b510      	push	{r4, lr}
 800303c:	eb01 0402 	add.w	r4, r1, r2
 8003040:	d902      	bls.n	8003048 <memmove+0x10>
 8003042:	4284      	cmp	r4, r0
 8003044:	4623      	mov	r3, r4
 8003046:	d807      	bhi.n	8003058 <memmove+0x20>
 8003048:	1e43      	subs	r3, r0, #1
 800304a:	42a1      	cmp	r1, r4
 800304c:	d008      	beq.n	8003060 <memmove+0x28>
 800304e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003052:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003056:	e7f8      	b.n	800304a <memmove+0x12>
 8003058:	4601      	mov	r1, r0
 800305a:	4402      	add	r2, r0
 800305c:	428a      	cmp	r2, r1
 800305e:	d100      	bne.n	8003062 <memmove+0x2a>
 8003060:	bd10      	pop	{r4, pc}
 8003062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800306a:	e7f7      	b.n	800305c <memmove+0x24>

0800306c <_sbrk_r>:
 800306c:	b538      	push	{r3, r4, r5, lr}
 800306e:	2300      	movs	r3, #0
 8003070:	4d05      	ldr	r5, [pc, #20]	@ (8003088 <_sbrk_r+0x1c>)
 8003072:	4604      	mov	r4, r0
 8003074:	4608      	mov	r0, r1
 8003076:	602b      	str	r3, [r5, #0]
 8003078:	f7fd fb78 	bl	800076c <_sbrk>
 800307c:	1c43      	adds	r3, r0, #1
 800307e:	d102      	bne.n	8003086 <_sbrk_r+0x1a>
 8003080:	682b      	ldr	r3, [r5, #0]
 8003082:	b103      	cbz	r3, 8003086 <_sbrk_r+0x1a>
 8003084:	6023      	str	r3, [r4, #0]
 8003086:	bd38      	pop	{r3, r4, r5, pc}
 8003088:	2000026c 	.word	0x2000026c

0800308c <memchr>:
 800308c:	4603      	mov	r3, r0
 800308e:	b510      	push	{r4, lr}
 8003090:	b2c9      	uxtb	r1, r1
 8003092:	4402      	add	r2, r0
 8003094:	4293      	cmp	r3, r2
 8003096:	4618      	mov	r0, r3
 8003098:	d101      	bne.n	800309e <memchr+0x12>
 800309a:	2000      	movs	r0, #0
 800309c:	e003      	b.n	80030a6 <memchr+0x1a>
 800309e:	7804      	ldrb	r4, [r0, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	428c      	cmp	r4, r1
 80030a4:	d1f6      	bne.n	8003094 <memchr+0x8>
 80030a6:	bd10      	pop	{r4, pc}

080030a8 <memcpy>:
 80030a8:	440a      	add	r2, r1
 80030aa:	4291      	cmp	r1, r2
 80030ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80030b0:	d100      	bne.n	80030b4 <memcpy+0xc>
 80030b2:	4770      	bx	lr
 80030b4:	b510      	push	{r4, lr}
 80030b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030ba:	4291      	cmp	r1, r2
 80030bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030c0:	d1f9      	bne.n	80030b6 <memcpy+0xe>
 80030c2:	bd10      	pop	{r4, pc}

080030c4 <_realloc_r>:
 80030c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030c8:	4607      	mov	r7, r0
 80030ca:	4614      	mov	r4, r2
 80030cc:	460d      	mov	r5, r1
 80030ce:	b921      	cbnz	r1, 80030da <_realloc_r+0x16>
 80030d0:	4611      	mov	r1, r2
 80030d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030d6:	f7ff bc3b 	b.w	8002950 <_malloc_r>
 80030da:	b92a      	cbnz	r2, 80030e8 <_realloc_r+0x24>
 80030dc:	f7ff fbce 	bl	800287c <_free_r>
 80030e0:	4625      	mov	r5, r4
 80030e2:	4628      	mov	r0, r5
 80030e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030e8:	f000 f81a 	bl	8003120 <_malloc_usable_size_r>
 80030ec:	4284      	cmp	r4, r0
 80030ee:	4606      	mov	r6, r0
 80030f0:	d802      	bhi.n	80030f8 <_realloc_r+0x34>
 80030f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80030f6:	d8f4      	bhi.n	80030e2 <_realloc_r+0x1e>
 80030f8:	4621      	mov	r1, r4
 80030fa:	4638      	mov	r0, r7
 80030fc:	f7ff fc28 	bl	8002950 <_malloc_r>
 8003100:	4680      	mov	r8, r0
 8003102:	b908      	cbnz	r0, 8003108 <_realloc_r+0x44>
 8003104:	4645      	mov	r5, r8
 8003106:	e7ec      	b.n	80030e2 <_realloc_r+0x1e>
 8003108:	42b4      	cmp	r4, r6
 800310a:	4622      	mov	r2, r4
 800310c:	4629      	mov	r1, r5
 800310e:	bf28      	it	cs
 8003110:	4632      	movcs	r2, r6
 8003112:	f7ff ffc9 	bl	80030a8 <memcpy>
 8003116:	4629      	mov	r1, r5
 8003118:	4638      	mov	r0, r7
 800311a:	f7ff fbaf 	bl	800287c <_free_r>
 800311e:	e7f1      	b.n	8003104 <_realloc_r+0x40>

08003120 <_malloc_usable_size_r>:
 8003120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003124:	1f18      	subs	r0, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	bfbc      	itt	lt
 800312a:	580b      	ldrlt	r3, [r1, r0]
 800312c:	18c0      	addlt	r0, r0, r3
 800312e:	4770      	bx	lr

08003130 <_init>:
 8003130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003132:	bf00      	nop
 8003134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003136:	bc08      	pop	{r3}
 8003138:	469e      	mov	lr, r3
 800313a:	4770      	bx	lr

0800313c <_fini>:
 800313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313e:	bf00      	nop
 8003140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003142:	bc08      	pop	{r3}
 8003144:	469e      	mov	lr, r3
 8003146:	4770      	bx	lr
